[{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet allows jointly visualize cells genes scRNA-seq data single planar plot, called biMAP. CAbiNet performs biclustering identify cell groups corresponding marker genes, can conveniently displayed biMAP. -depth explanation CAbiNet, please refer pre-print bioRxiv: https://doi.org/10.1101/2022.12.20.521232 working CAbiNet please cite:","code":"Zhao, Y., Kohl, C., Rosebrock, D., Hu, Q., Hu, Y., Vingron, M., CAbiNet: Joint visualization of cells and genes based on a gene-cell graph. 2022, bioRxiv, https://doi.org/10.1101/2022.12.20.521232"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"can install package GitHub running: CAbiNet also number python dependencies, namely umap-learn, numpy, pytorch, scikit-learn scipy. installed automatically installation CAbiNet. issue, can also install manually running following: run problem installing running package, please let us know opening issue GitHub repository https://github.com/VingronLab/CAbiNet/issues. help solve problem best can.","code":"# Until changes are merged into the Bioconductor version, please install the below version of APL. devtools::install_github(\"VingronLab/APL\", ref = \"cabinet-freeze\") devtools::install_github(\"VingronLab/CAbiNet\") library(reticulate) install_miniconda() use_condaenv(   condaenv = file.path(miniconda_path(), \"envs/r-reticulate\"),   required = TRUE )  conda_install(envname = \"r-reticulate\", packages = \"numpy\") conda_install(envname = \"r-reticulate\", packages = \"pytorch\") conda_install(envname = \"r-reticulate\", packages = \"scikit-learn\") conda_install(envname = \"r-reticulate\", packages = \"umap-learn\") conda_install(envname = \"r-reticulate\", packages = \"scipy\")"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"analyzing-data-with-cabinet","dir":"Articles","previous_headings":"","what":"Analyzing data with CAbiNet","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet designed work count matrix input, also fully compatible SingleCellExperiment objects. demonstrate Zeisel Brain Dataset obtained scRNAseq package work algorithm package. dataset SingleCellExperiment (SCE) object format. working Seurat object, can still use input cacomp function APL. examples prepare data use CAbiNet bicluster visualize cells marker genes. use biMAP biclustering information quickly easily annotate cell types.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"setup","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Setup","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"Loading data:","code":"library(CAbiNet) library(APL) library(scRNAseq) library(scran) library(scater)  set.seed(2358) sce <- ZeiselBrainData() #> snapshotDate(): 2022-04-26 #> see ?scRNAseq and browseVignettes('scRNAseq') for documentation #> loading from cache #> see ?scRNAseq and browseVignettes('scRNAseq') for documentation #> loading from cache #> see ?scRNAseq and browseVignettes('scRNAseq') for documentation #> loading from cache #> snapshotDate(): 2022-04-26 #> see ?scRNAseq and browseVignettes('scRNAseq') for documentation #> loading from cache sce #> class: SingleCellExperiment  #> dim: 20006 3005  #> metadata(0): #> assays(1): counts #> rownames(20006): Tspan12 Tshz1 ... mt-Rnr1 mt-Nd4l #> rowData names(1): featureType #> colnames(3005): 1772071015_C02 1772071017_G12 ... 1772066098_A12 #>   1772058148_F03 #> colData names(10): tissue group # ... level1class level2class #> reducedDimNames(0): #> mainExpName: endogenous #> altExpNames(2): ERCC repeat"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"data-pre-processing","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Data pre-processing","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet based Correspondence Analysis, sensitive outliers count matrix. therefore strongly suggest pre-process data applying CAbiNet. offer routine pre-processing steps scRNA-seq data analysis packages scran scater. can modify steps according demands.","code":"mt_genes <- grepl(\"^mt-\", rownames(sce), ignore.case = TRUE)  qc_df <- perCellQCMetrics(sce, subsets = list(Mito = mt_genes))  reasons <- perCellQCFilters(qc_df,   sum.field = \"sum\",   detected.field = \"detected\",   sub.fields = c(\"subsets_Mito_percent\") )  colData(sce) <- cbind(colData(sce), qc_df) sce$discard <- reasons$discard  sce <- sce[, !reasons$discard]  cnts <- as.matrix(counts(sce)) genes_detect <- rowSums(cnts > 0) > (ncol(cnts) * 0.01) sce <- sce[genes_detect, ]  clust <- quickCluster(sce) sce <- computeSumFactors(sce, cluster = clust, min.mean = 0.1) sce <- logNormCounts(sce)  dec <- modelGeneVar(sce) top_genes <- getTopHVGs(dec, prop = 0.8) sce <- fixedPCA(sce, subset.row = top_genes) sce <- runUMAP(sce, dimred = \"PCA\")  plotReducedDim(sce, dimred = \"UMAP\", colour_by = \"level1class\")"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"dimensionality-reduction-in-cabinet","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Dimensionality Reduction in CAbiNet","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"dimensionality reduction CAbiNet performed Correspondence Analysis (CA) package APL. important parameters dimensionality reduction step number dimensions (dims) want keep (similar number principal components PCA) number genes (top) highest inertia want keep. top set 5000 default, case top 5000 genes highest inertia selected performing CA. already picked highly variable genes advance (), can keep genes count matrix handed function. number genes kept set low, otherwise important marker genes often removed data. parameter python = TRUE indicates singular value decomposition CA performed pytorch implementation. can drastically speed computation, particular large datasets. install python dependencies APL, please set FALSE.","code":"# Correspondence Analysis caobj <- cacomp(   sce[top_genes, ],   assay = \"logcounts\",   dims = 40,   top = nrow(sce[top_genes, ]),   python = TRUE )"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"cabinet-biclustering","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"CAbiNet Biclustering","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet builds shared-nearest-neighbour (SNN) gene-cell graph based dimensionality reduced CA space. build graph, need specify number nearest neighours (NNs) cells genes function caclust parameter k. cell-gene graph made 4 sub-graphs (cell-cell, gene-gene, cell-gene gene-cell graph), also 4 different ks can tuned. k set single integer, CAbiNet use k 4 sub-graphs. , however, vector 4 integers supplied, use k cell-cell, gene-gene, cell-gene gene-cell graph exact order. , example k = 30 equivalent k = (30, 30, 30, 30), k = c(30, 15, 30, 30) uses k half large graphs gene-gene graph. experience, setting k gene-gene graph approx. half graphs leads good visualization/biclustering. See also ?caclust. simplest way run CAbiNet therefore: large number genes kept pre-processing, biMAP can become crowded can hard identify marker genes interest. CAbiNet therefore includes method remove genes add much information biMAP. paramter select_genes indicates whether genes edge cell removed graph: Furthermore, offer optional graph pruning procedure parameters prune_overlap overlap remove sporadic edges cells genes. Setting prune_overlap TRUE overlap fraction 0 1 allows trim edges cells genes shared less ‘overlap’-fraction cell neighours. Note function works select_genes set TRUE. many cases also set marker genes like use cell type annotation. order prevent marker genes removed graph pruning can make algorithm aware using marker_genes parameter. building cell-gene graph, biclustering performed either Leiden algorithm (algorithm = \"leiden\") Spectral clustrering (algorithm = \"spectral\"). --date version package, call “leiden” function either R package leiden igraph. igraph implementation can applied set “leiden_pack = ‘igraph’” (default, see ?caclust). testing, igraph implementation runs faster package leiden similar accuracy. Therefore, recommend set leiden_pack = \"igraph\". resulting caclust object contains biclustering results SNN graph: cluster assignments cells genes can obtained functions gene_clusters() cell_clusters(): many genes included graph, CAbiNet may detect clusters contain genes. genes probably marker genes help annotating cells. can therefore safely remove mono-clusters running: example weren’t mono-clusters, results identical saw . Removing monoclusters done computing biMAP. added benefit, removing mono-clusters often improves layout embedding.","code":"# SNN graph & biclustering cabic <- caclust(   obj = caobj,   k = c(70, 35, 70, 70),   select_genes = FALSE,   algorithm = \"leiden\",   resolution = 1 ) # SNN graph & biclustering cabic <- caclust(   obj = caobj,   k = c(70, 35, 70, 70),   select_genes = TRUE,   prune_overlap = FALSE,   algorithm = \"leiden\",   resolution = 1 ) # Marker genes from A. Zeisel et al., Cell types in the mouse cortex and hippocampus revealed by single-cell RNA-seq, 2015, Science markers <- c(   \"Gad1\",   \"Tbr1\",   \"Spink8\",   \"Mbp\",   \"Aldoc\",   \"Aif1\",   \"Cldn5\",   \"Acta2\" )  # SNN graph & biclustering cabic <- caclust(   obj = caobj,   k = c(70, 35, 70, 70),   select_genes = TRUE,   prune_overlap = TRUE,   mode = \"all\",   overlap = 0.2,   algorithm = \"leiden\",   leiden_pack = \"igraph\",   resolution = 1,   marker_genes = markers ) cabic #> caclust object with 2874 cells and 1617 genes. #> 8 clusters found. #> Clustering results: #>  #>  cluster ncells ngenes #>  1       297    154    #>  2        34     68    #>  3       440    144    #>  4       242    185    #>  5       846    237    #>  6       146    187    #>  7       597    317    #>  8       272    325 sce$cabinet <- cell_clusters(cabic)  cat(\"Gene clusters:\\n\") head(gene_clusters(cabic))  cat(\"\\nCell clusters:\\n\") head(cell_clusters(cabic)) #> Gene clusters: #>   Apod    Mog   Ermn  Ptgds Opalin   Aspa  #>      7      7      7      7      7      7  #> Levels: 1 2 3 4 5 6 7 8 #>  #> Cell clusters: #> 1772071015_C02 1772071017_G12 1772071017_A05 1772071014_B06 1772067065_H06  #>              1              1              1              1              1  #> 1772071017_E02  #>              1  #> Levels: 1 2 3 4 5 6 7 8 cabic <- rm_monoclusters(cabic) cabic #> caclust object with 2874 cells and 1617 genes. #> 8 clusters found. #> Clustering results: #>  #>  cluster ncells ngenes #>  1       297    154    #>  2        34     68    #>  3       440    144    #>  4       242    185    #>  5       846    237    #>  6       146    187    #>  7       597    317    #>  8       272    325"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"visualization-of-cells-and-genes-in-the-bimap","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Visualization of cells and genes in the biMAP","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"now compute biMAP embedding visualize scatter plot:   plot_biMAP plot_scatter_biMAP produce scatter plot embedding. large data sets can become difficult differentiate cells genes plot. mainly interested identifying marker genes clusters, can instead use hex biMAP less busy visualization:","code":"# Compute biMAP embedding. cabic <- biMAP(cabic, k = 30)  # plot results plot_biMAP(cabic,   color_genes = TRUE,   label_marker_genes = markers ) # only plot the cell clusters plot_scatter_biMAP(cabic,   gene_alpha = 0.5,   color_genes = FALSE,   color_by = \"level1class\",   meta_df = colData(sce) ) plot_hex_biMAP(cabic, color_genes = TRUE, hex_n = 20)"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"cell-type-annotation","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Cell type annotation","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet allows intuitive cell type annotation. Instead make large number feature plots, can simply display position set marker genes directly biMAP. position genes cells biMAP, can easily tell marker genes cell group without perform differential gene expression analysis.  remaining unnanotated cluster bicluster 2. cluster consists mostly cells annotated astrocytes, also oligodendrocytes pyramidal CA1 cells. either distinct sub-cell type group outliers/doublets. can also see similar cell types Endothelial Mural clustered single cluster (labelled Endothelial). Using feature biMAP visualize expression two Marker genes Acta2 (Mural) Cldn5 (Endothelial) can confirm cluster subdivided location marker genes.   list known marker genes cell types data, can use annotate_biclustering() function. uses “CellMarker” gene set automatically annotate biclusters best matching cell type set:  Last least, can explore visualization interactively, just display names marker genes plot. Co-clustered genes can labeled biMAP. example, don’t list known marker genes hand, can display names potential marker genes  Sometimes name genes overlap can difficult read names plot. Exploring biMAP interactively allows zoom group points inspect information detail:","code":"cts <- c(   \"Interneurons\",   \"S1 Pyramidal\",   \"CA 1 Pyramidal\",   \"Oligodendrocytes\",   \"Astrocytes\",   \"Microglia\",   \"Endothelial\",   \"Mural\" )  ## make sure the cell types and marker genes are in a one-to-one order. df <- data.frame(   cell_type = cts,   marker_gene = markers )  genecls <- gene_clusters(cabic) biclusters <- vector(mode = \"numeric\", length = nrow(df))  for (i in seq_along(df$marker_gene)) {   biclusters[i] <- genecls[df$marker_gene[i]] }  df$cabinet <- biclusters df #>          cell_type marker_gene cabinet #> 1     Interneurons        Gad1       1 #> 2     S1 Pyramidal        Tbr1       3 #> 3   CA 1 Pyramidal      Spink8       5 #> 4 Oligodendrocytes         Mbp       7 #> 5       Astrocytes       Aldoc       4 #> 6        Microglia        Aif1       6 #> 7      Endothelial       Cldn5       8 #> 8            Mural       Acta2       8 sce$cabinet_ct <- as.numeric(sce$cabinet)  for (i in seq_along(df$cabinet)) {   sel <- which(sce$cabinet_ct == df$cabinet[i])   sce$cabinet_ct[sel] <- df$cell_type[i] } sce$cabinet_ct <- as.factor(sce$cabinet_ct)  plot_biMAP(cabic,   meta_df = colData(sce),   color_by = \"cabinet_ct\",   label_marker_genes = markers,   color_genes = FALSE ) p1 <- plot_feature_biMAP(   sce = sce,   caclust = cabic,   feature = \"Acta2\",   label_size = 4 )  p2 <- plot_feature_biMAP(   sce = sce,   caclust = cabic,   feature = \"Cldn5\",   label_size = 4 )  p1 p2 ann_cabic <- annotate_biclustering(   obj = cabic,   universe = rownames(sce),   org = \"mm\",   set = \"CellMarker\" )  plot_biMAP(   ann_cabic,   color_genes = TRUE,   label_marker_genes = markers ) plot_biMAP(   cabic,   color_by = \"cluster\",   label_marker_genes = TRUE,   group_label_size = 6,   color_genes = TRUE,   max.overlaps = 40 ) #> Warning: ggrepel: 1617 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps plot_biMAP(cabic,   color_by = \"cluster\",   color_genes = TRUE,   interactive = TRUE ) #> Warning in geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomTextRepel() has yet to be implemented in plotly. #>   If you'd like to see this geom implemented, #>   Please open an issue with your example code at #>   https://github.com/ropensci/plotly/issues"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"integration-with-bioconductor-packages","dir":"Articles","previous_headings":"","what":"Integration with Bioconductor packages","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"intergrating clustering results cell type annotations SCE object, gene expression levels can also visualized violin plots.  Since CAbiNet co-clusters -regulated genes cell groups, information -regulated genes missing. find dysregulated genes, can make use cell clustering results CAbiNet differential gene expression results packges study dysregulated genes different cell clusters.","code":"scater::plotExpression(sce,   features = markers[markers %in% rownames(sce)],   x = \"cabinet\", colour_by = \"cabinet\" ) +   theme(axis.text.x = element_text(angle = 0, hjust = 1)) scater::plotExpression(sce,   features = markers[markers %in% rownames(sce)],   x = \"level1class\", colour_by = \"level1class\" ) +   theme(axis.text.x = element_text(angle = 30, hjust = 1))"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAbiNet.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"","code":"#> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: MarIuX64 2.0 GNU/Linux #>  #> Matrix products: default #> BLAS:   /pkg/R-4.2.1-0/lib/R/lib/libRblas.so #> LAPACK: /home/kohl/.local/share/r-miniconda/envs/r-reticulate/lib/libmkl_intel_lp64.so #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C         LC_TIME=C            #>  [4] LC_COLLATE=C         LC_MONETARY=C        LC_MESSAGES=C        #>  [7] LC_PAPER=C           LC_NAME=C            LC_ADDRESS=C         #> [10] LC_TELEPHONE=C       LC_MEASUREMENT=C     LC_IDENTIFICATION=C  #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] scater_1.24.0               ggplot2_3.5.0               #>  [3] scran_1.24.1                scuttle_1.6.3               #>  [5] scRNAseq_2.10.0             SingleCellExperiment_1.18.1 #>  [7] SummarizedExperiment_1.26.1 Biobase_2.58.0              #>  [9] GenomicRanges_1.48.0        GenomeInfoDb_1.34.9         #> [11] IRanges_2.32.0              S4Vectors_0.36.2            #> [13] BiocGenerics_0.44.0         MatrixGenerics_1.8.1        #> [15] matrixStats_0.62.0          CAbiNet_0.99.2              #> [17] APL_1.2.0                   BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>   [1] rappdirs_0.3.3                SparseM_1.81                  #>   [3] rtracklayer_1.56.1            scattermore_0.8               #>   [5] SeuratObject_4.1.0            ragg_1.2.2                    #>   [7] tidyr_1.3.1                   bit64_4.0.5                   #>   [9] knitr_1.46                    irlba_2.3.5.1                 #>  [11] DelayedArray_0.22.0           data.table_1.15.4             #>  [13] rpart_4.1.16                  KEGGREST_1.38.0               #>  [15] RCurl_1.98-1.8                AnnotationFilter_1.20.0       #>  [17] generics_0.1.3                GenomicFeatures_1.48.3        #>  [19] org.Mm.eg.db_3.15.0           ScaledMatrix_1.4.0            #>  [21] cowplot_1.1.3                 RSQLite_2.3.6                 #>  [23] RANN_2.6.1                    future_1.27.0                 #>  [25] bit_4.0.5                     spatstat.data_3.0-4           #>  [27] xml2_1.3.3                    httpuv_1.6.5                  #>  [29] assertthat_0.2.1              viridis_0.6.5                 #>  [31] xfun_0.43                     hms_1.1.1                     #>  [33] jquerylib_0.1.4               evaluate_0.15                 #>  [35] promises_1.2.0.1              additivityTests_1.1-4.1       #>  [37] fansi_1.0.6                   restfulr_0.0.15               #>  [39] progress_1.2.2                dbplyr_2.2.1                  #>  [41] igraph_2.0.3                  DBI_1.2.2                     #>  [43] htmlwidgets_1.5.4             spatstat.geom_3.2-9           #>  [45] purrr_1.0.2                   ellipsis_0.3.2                #>  [47] crosstalk_1.2.0               RSpectra_0.16-1               #>  [49] dplyr_1.1.4                   bookdown_0.27                 #>  [51] biomaRt_2.52.0                deldir_1.0-6                  #>  [53] sparseMatrixStats_1.8.0       vctrs_0.6.5                   #>  [55] here_1.0.1                    ensembldb_2.20.2              #>  [57] ROCR_1.0-11                   abind_1.4-5                   #>  [59] withr_3.0.0                   cachem_1.0.8                  #>  [61] RcppEigen_0.3.4.0.0           progressr_0.10.1              #>  [63] sctransform_0.3.3             GenomicAlignments_1.32.1      #>  [65] prettyunits_1.1.1             goftest_1.2-3                 #>  [67] cluster_2.1.3                 ExperimentHub_2.4.0           #>  [69] lazyeval_0.2.2                crayon_1.5.2                  #>  [71] labeling_0.4.3                edgeR_3.38.2                  #>  [73] pkgconfig_2.0.3               vipor_0.4.5                   #>  [75] nlme_3.1-158                  ProtGenerics_1.28.0           #>  [77] rlang_1.1.3                   globals_0.15.1                #>  [79] lifecycle_1.0.4               miniUI_0.1.1.1                #>  [81] filelock_1.0.2                BiocFileCache_2.4.0           #>  [83] rsvd_1.0.5                    AnnotationHub_3.4.0           #>  [85] rprojroot_2.0.3               polyclip_1.10-6               #>  [87] lmtest_0.9-40                 graph_1.74.0                  #>  [89] Matrix_1.5-4                  zoo_1.8-10                    #>  [91] beeswarm_0.4.0                ggridges_0.5.3                #>  [93] png_0.1-8                     viridisLite_0.4.2             #>  [95] rjson_0.2.21                  bitops_1.0-7                  #>  [97] KernSmooth_2.23-20            Biostrings_2.66.0             #>  [99] blob_1.2.4                    DelayedMatrixStats_1.18.2     #> [101] stringr_1.5.1                 parallelly_1.32.1             #> [103] spatstat.random_3.2-3         beachmat_2.12.0               #> [105] scales_1.3.0                  hexbin_1.28.2                 #> [107] memoise_2.0.1                 magrittr_2.0.3                #> [109] plyr_1.8.9                    ica_1.0-3                     #> [111] zlibbioc_1.44.0               compiler_4.2.1                #> [113] dqrng_0.3.0                   BiocIO_1.6.0                  #> [115] RColorBrewer_1.1-3            fitdistrplus_1.1-8            #> [117] Rsamtools_2.12.0              cli_3.6.2                     #> [119] XVector_0.38.0                listenv_0.8.0                 #> [121] patchwork_1.2.0               pbapply_1.5-0                 #> [123] MASS_7.3-58                   mgcv_1.8-40                   #> [125] tidyselect_1.2.1              stringi_1.8.3                 #> [127] RcppHungarian_0.3             textshaping_0.3.6             #> [129] highr_0.9                     yaml_2.3.5                    #> [131] locfit_1.5-9.6                BiocSingular_1.12.0           #> [133] ggrepel_0.9.5                 grid_4.2.1                    #> [135] sass_0.4.2                    tools_4.2.1                   #> [137] future.apply_1.9.0            parallel_4.2.1                #> [139] bluster_1.6.0                 metapod_1.4.0                 #> [141] gridExtra_2.3                 farver_2.1.1                  #> [143] Rtsne_0.16                    digest_0.6.35                 #> [145] BiocManager_1.30.22           rgeos_0.5-9                   #> [147] FNN_1.1.4                     shiny_1.7.2                   #> [149] flexclust_1.4-1               Rcpp_1.0.12                   #> [151] BiocVersion_3.15.2            later_1.3.0                   #> [153] RcppAnnoy_0.0.19              org.Hs.eg.db_3.15.0           #> [155] httr_1.4.7                    AnnotationDbi_1.60.2          #> [157] colorspace_2.1-0              biclust_2.0.3.1               #> [159] XML_3.99-0.10                 fs_1.6.3                      #> [161] topGO_2.48.0                  tensor_1.5                    #> [163] reticulate_1.25               splines_4.2.1                 #> [165] statmod_1.4.36                uwot_0.1.11                   #> [167] spatstat.utils_3.0-4          pkgdown_2.0.6                 #> [169] sp_1.5-0                      plotly_4.10.4                 #> [171] systemfonts_1.0.6             xtable_1.8-4                  #> [173] jsonlite_1.8.8                modeltools_0.2-23             #> [175] R6_2.5.1                      pillar_1.9.0                  #> [177] htmltools_0.5.3               mime_0.12                     #> [179] glue_1.7.0                    fastmap_1.1.1                 #> [181] BiocParallel_1.32.6           BiocNeighbors_1.14.0          #> [183] class_7.3-20                  interactiveDisplayBase_1.34.0 #> [185] codetools_0.2-18              utf8_1.2.4                    #> [187] lattice_0.20-45               bslib_0.4.0                   #> [189] spatstat.sparse_3.0-3         tibble_3.2.1                  #> [191] ggbeeswarm_0.6.0              curl_5.2.1                    #> [193] leiden_0.4.2                  GO.db_3.16.0                  #> [195] limma_3.52.4                  survival_3.3-1                #> [197] rmarkdown_2.26                desc_1.4.1                    #> [199] munsell_0.5.1                 GenomeInfoDbData_1.2.9        #> [201] reshape2_1.4.4                gtable_0.3.4                  #> [203] spatstat.core_2.4-4           Seurat_4.1.1"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet allows jointly visualize cells genes scRNA-seq data single planar plot, called biMAP. CAbiNet performs biclustering identify cell groups corresponding marker genes, can conveniently displayed biMAP. -depth explanation CAbiNet, please refer pre-print bioRxiv: https://doi.org/10.1101/2022.12.20.521232 working CAbiNet please cite:","code":"Zhao, Y., Kohl, C., Rosebrock, D., Hu, Q., Hu, Y., Vingron, M., CAbiNet: Joint visualization of cells and genes based on a gene-cell graph. 2022, bioRxiv, https://doi.org/10.1101/2022.12.20.521232"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"can install package GitHub running: CAbiNet also number python dependencies, namely umap, umap-learn, numpy, torch scipy. installed automatically installation CAbiNet. issue, can also install manually running following: run problem installing running package, please let us know opening issue GitHub repository https://github.com/VingronLab/CAbiNet/issues. help solve problem best can.","code":"# Until changes are merged into the Bioconductor version, please install the below version of APL. devtools::install_github(\"VingronLab/APL\", ref = \"cabinet\") devtools::install_github(\"VingronLab/CAbiNet\") library(reticulate) install_miniconda() use_condaenv(condaenv = file.path(miniconda_path(),\"envs/r-reticulate\"),              required=TRUE)  conda_install(envname = \"r-reticulate\", packages = \"numpy\") conda_install(envname = \"r-reticulate\", packages = \"torch\") conda_install(envname = \"r-reticulate\", packages = \"umap\") conda_install(envname = \"r-reticulate\", packages = \"umap-learn\") conda_install(envname = \"r-reticulate\", packages = \"scipy\")"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"analyzing-data-with-cabinet","dir":"Articles","previous_headings":"","what":"Analyzing data with CAbiNet","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet designed work count matrix input, also fully compatible SingleCellExperiment objects. demonstrate Zeisel Brain Dataset obtained scRNAseq package work algorithm package. dataset SingleCellExperiment (SCE) object format. working Seurat object, can still use input cacomp function APL. examples prepare data use CAbiNet bicluster visualize cells marker genes. use biMAP biclustering information quickly easily annotate cell types.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"setup","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Setup","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"Loading data:","code":"library(CAbiNet) library(APL) library(scRNAseq) library(scran) library(scater)  set.seed(2358) sce <- ZeiselBrainData() #> snapshotDate(): 2022-10-31 #> see ?scRNAseq and browseVignettes('scRNAseq') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> see ?scRNAseq and browseVignettes('scRNAseq') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> see ?scRNAseq and browseVignettes('scRNAseq') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> snapshotDate(): 2022-10-31 #> see ?scRNAseq and browseVignettes('scRNAseq') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache sce #> class: SingleCellExperiment  #> dim: 20006 3005  #> metadata(0): #> assays(1): counts #> rownames(20006): Tspan12 Tshz1 ... mt-Rnr1 mt-Nd4l #> rowData names(1): featureType #> colnames(3005): 1772071015_C02 1772071017_G12 ... 1772066098_A12 #>   1772058148_F03 #> colData names(10): tissue group # ... level1class level2class #> reducedDimNames(0): #> mainExpName: endogenous #> altExpNames(2): ERCC repeat"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"data-pre-processing","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Data pre-processing","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet based Correspondence Analysis, sensitive outliers count matrix. therefore strongly suggest pre-process data applying CAbiNet. offer routine pre-processing steps scRNA-seq data analysis packages scran scater. can modify steps according demands.","code":"mt_genes <- grepl(\"^mt-\",  rownames(sce), ignore.case = TRUE)  qc_df <- perCellQCMetrics(sce, subsets=list(Mito=mt_genes))  reasons <- perCellQCFilters(qc_df,                             sum.field = \"sum\",                             detected.field = \"detected\",                             sub.fields=c(\"subsets_Mito_percent\"))  colData(sce) <- cbind(colData(sce), qc_df) sce$discard <- reasons$discard  sce <- sce[,!reasons$discard]  cnts<- as.matrix(counts(sce)) genes_detect <- rowSums(cnts > 0) > (ncol(cnts)*0.01) sce <- sce[genes_detect,]  clust <- quickCluster(sce) sce <- computeSumFactors(sce, cluster=clust, min.mean=0.1) sce <- logNormCounts(sce)  dec <- modelGeneVar(sce) top_genes <- getTopHVGs(dec, prop = 0.8) sce <- fixedPCA(sce, subset.row=top_genes) sce <- runUMAP(sce, dimred=\"PCA\")  plotReducedDim(sce, dimred=\"UMAP\", colour_by=\"level1class\")"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"dimensionality-reduction-in-cabinet","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Dimensionality Reduction in CAbiNet","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"dimensionality reduction CAbiNet performed Correspondence Analysis (CA) package APL. important parameters dimensionality reduction step number dimensions (dims) want keep (similar number principal components PCA) number genes (top) highest inertia want keep. top set 5000 default, case top 5000 genes highest inertia selected performing CA. already picked highly variable genes advance (), can keep genes count matrix handed function. number genes kept set low, otherwise important marker genes often removed data. parameter python = TRUE indicates singular value decomposition CA performed pytorch implementation. can drastically speed computation, particular large datasets. install python dependencies APL, please set FALSE.","code":"# Correspondence Analysis caobj = cacomp(sce[top_genes,],                assay = \"logcounts\",                dims = 40,                top = nrow(sce[top_genes,]),                python = TRUE)"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"cabinet-biclustering","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"CAbiNet Biclustering","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet builds shared-nearest-neighbour (SNN) gene-cell graph based dimensionality reduced CA space. build graph, need specify number nearest neighours (NNs) cells genes function caclust parameter k. cell-gene graph made 4 sub-graphs (cell-cell, gene-gene, cell-gene gene-cell graph), also 4 different ks can tuned. k set single integer, CAbiNet use k 4 sub-graphs. , however, vector 4 integers supplied, use k cell-cell, gene-gene, cell-gene gene-cell graph exact order. , example k = 30 equivalent k = (30, 30, 30, 30), k = c(30, 15, 30, 30) uses k half large graphs gene-gene graph. experience, setting k gene-gene graph approx. half graphs leads good visualization/biclustering. See also ?caclust. simplest way run CAbiNet therefore: large number genes kept pre-processing, biMAP can become crowded can hard identify marker genes interest. CAbiNet therefore includes method remove genes add much information biMAP. paramter select_genes indicates whether genes edge cell removed graph: Furthermore, offer optional graph pruning procedure parameters prune_overlap overlap remove sporadic edges cells genes. Setting prune_overlap TRUE overlap fraction 0 1 allows trim edges cells genes shared less ‘overlap’-fraction cell neighours. Note function works select_genes set TRUE. many cases also set marker genes like use cell type annotation. order prevent marker genes removed graph pruning can make algorithm aware using marker_genes parameter. building cell-gene graph, biclustering performed either Leiden algorithm (algorithm = \"leiden\") Spectral clustrering (algorithm = \"spectral\"). resulting caclust object contains biclustering results SNN graph: cluster assignments cells genes can obtained functions gene_clusters() cell_clusters(): many genes included graph, CAbiNet may detect clusters contain genes. genes probably marker genes help annotating cells. can therefore safely remove mono-clusters running: example weren’t mono-clusters, results identical saw . Removing monoclusters done computing biMAP. added benefit, removing mono-clusters often improves layout embedding.","code":"# SNN graph & biclustering cabic <- caclust(obj = caobj,                  k = c(70, 35, 70, 70),                  select_genes = FALSE,                  algorithm = 'leiden',                  resolution = 1) # SNN graph & biclustering cabic <- caclust(obj = caobj,                  k = c(70, 35, 70, 70),                  select_genes = TRUE,                  prune_overlap = FALSE,                  algorithm = 'leiden',                  resolution = 1) # Marker genes from A. Zeisel et al., Cell types in the mouse cortex and hippocampus revealed by single-cell RNA-seq, 2015, Science markers <- c(\"Gad1\",              \"Tbr1\",              \"Spink8\",              \"Mbp\",              \"Aldoc\",              \"Aif1\",              \"Cldn5\",              \"Acta2\")  # SNN graph & biclustering cabic <- caclust(obj = caobj,                  k = c(70, 35, 70, 70),                  select_genes = TRUE,                  prune_overlap = TRUE,                  mode = \"all\",                  overlap = 0.2,                  algorithm = 'leiden',                  resolution = 1,                  marker_genes = markers) cabic #> caclust object with 2874 cells and 1622 genes. #> 8 clusters found. #> Clustering results: #>  #>  cluster ncells ngenes #>  1       845    239    #>  2       599    315    #>  3       271    324    #>  4       440    146    #>  5       297    152    #>  6       242    189    #>  7       146    188    #>  8        34     69 sce$cabinet <- cell_clusters(cabic)  cat(\"Gene clusters:\\n\") head(gene_clusters(cabic))  cat(\"\\nCell clusters:\\n\") head(cell_clusters(cabic)) #> Gene clusters: #>   Apod    Mog   Ermn  Ptgds Opalin   Aspa  #>      2      2      2      2      2      2  #> Levels: 1 2 3 4 5 6 7 8 #>  #> Cell clusters: #> 1772071015_C02 1772071017_G12 1772071017_A05 1772071014_B06 1772067065_H06  #>              5              5              5              5              5  #> 1772071017_E02  #>              5  #> Levels: 1 2 3 4 5 6 7 8 cabic <- rm_monoclusters(cabic) cabic #> caclust object with 2874 cells and 1622 genes. #> 8 clusters found. #> Clustering results: #>  #>  cluster ncells ngenes #>  1       845    239    #>  2       599    315    #>  3       271    324    #>  4       440    146    #>  5       297    152    #>  6       242    189    #>  7       146    188    #>  8        34     69"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"visualization-of-cells-and-genes-in-the-bimap","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Visualization of cells and genes in the biMAP","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"now compute biMAP embedding visualize scatter plot:   plot_biMAP plot_scatter_biMAP produce scatter plot embedding. large data sets can become difficult differentiate cells genes plot. mainly interested identifying marker genes clusters, can instead use hex biMAP less busy visualization:","code":"# Compute biMAP embedding. cabic <- biMAP(cabic, k = 30)  # plot results plot_biMAP(cabic,            color_genes = TRUE,            label_marker_genes = markers) # only plot the cell clusters plot_scatter_biMAP(cabic,                    gene_alpha = 0.5,                    color_genes = FALSE,                    color_by = \"level1class\",                    meta_df = colData(sce)) plot_hex_biMAP(cabic, color_genes = TRUE, hex_n = 20)"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"cell-type-annotation","dir":"Articles","previous_headings":"Analyzing data with CAbiNet","what":"Cell type annotation","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"CAbiNet allows intuitive cell type annotation. Instead make large number feature plots, can simply display position set marker genes directly biMAP. position genes cells biMAP, can easily tell marker genes cell group without perform differential gene expression analysis. remaining unnanotated cluster bicluster 8. cluster consists mostly cells annotated astrocytes, also oligodendrocytes pyramidal CA1 cells. either distinct sub-cell type group outliers/doublets. can also see similar cell types Endothelial Mural clustered single cluster (labelled Endothelial). Using feature biMAP visualize expression two Marker genes Acta2 (Mural) Cldn5 (Endothelial) can confirm cluster subdivided location marker genes.   list marker genes cell types data, can explore visualization interactively, just display names marker genes plot. Co-clustered genes can labeled biMAP. example, don’t list known marker genes hand, can display names potential marker genes  Sometimes name genes overlap can difficult read names plot. Exploring biMAP interactively allows zoom group points inspect information detail:","code":"cts <- c(\"Interneurons\",          \"S1 Pyramidal\",          \"CA 1 Pyramidal\",          \"Oligodendrocytes\",          \"Astrocytes\",          \"Microglia\",          \"Endothelial\",          \"Mural\")  ## make sure the cell types and marker genes are in a one-to-one order. df <- data.frame(cell_type = cts,                  marker_gene = markers)  genecls <- gene_clusters(cabic) biclusters <- vector(mode=\"numeric\", length = nrow(df))  for (i in seq_along(df$marker_gene)){   biclusters[i] <- genecls[df$marker_gene[i]] }  df$cabinet <- biclusters df #>          cell_type marker_gene cabinet #> 1     Interneurons        Gad1       5 #> 2     S1 Pyramidal        Tbr1       4 #> 3   CA 1 Pyramidal      Spink8       1 #> 4 Oligodendrocytes         Mbp       2 #> 5       Astrocytes       Aldoc       6 #> 6        Microglia        Aif1       7 #> 7      Endothelial       Cldn5       3 #> 8            Mural       Acta2       3 sce$cabinet_ct <- as.numeric(sce$cabinet)  for (i in seq_along(df$cabinet)){   sel <- which(sce$cabinet_ct == df$cabinet[i])   sce$cabinet_ct[sel] <- df$cell_type[i] } sce$cabinet_ct <- as.factor(sce$cabinet_ct)  plot_biMAP(cabic,            meta_df = colData(sce),            color_by = \"cabinet_ct\",            label_marker_genes = markers) p1 <- plot_feature_biMAP(sce = sce,                    caclust = cabic,                    feature = 'Acta2',                    label_size = 4)  p2 <- plot_feature_biMAP(sce = sce,                    caclust = cabic,                    feature = 'Cldn5',                    label_size = 4)  p1 p2 plot_biMAP(cabic, color_by = \"cluster\",            label_marker_genes = TRUE,            group_label_size = 6,            color_genes = TRUE,            max.overlaps = 20) #> Warning: ggrepel: 1622 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps plot_biMAP(cabic, color_by = \"cluster\",            color_genes = TRUE,            interactive = TRUE) #> Warning in geom2trace.default(dots[[1L]][[1L]], dots[[2L]][[1L]], dots[[3L]][[1L]]): geom_GeomTextRepel() has yet to be implemented in plotly. #>   If you'd like to see this geom implemented, #>   Please open an issue with your example code at #>   https://github.com/ropensci/plotly/issues"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"integration-with-bioconductor-packages","dir":"Articles","previous_headings":"","what":"Integration with Bioconductor packages","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"intergrating clustering results cell type annotations SCE object, gene expression levels can also visualized violin plots.  Since CAbiNet co-clusters -regulated genes cell groups, information -regulated genes missing. find dysregulated genes, can make use cell clustering results CAbiNet differential gene expression results packges study dysregulated genes different cell clusters.","code":"scater::plotExpression(sce, features = markers[markers %in% rownames(sce)]  ,                        x = 'cabinet', colour_by = 'cabinet') +                        theme(axis.text.x = element_text(angle = 0, hjust = 1)) scater::plotExpression(sce, features = markers[markers %in% rownames(sce)]  ,                        x = 'level1class', colour_by = 'level1class') +                        theme(axis.text.x = element_text(angle = 30, hjust = 1))"},{"path":"https://vingronlab.github.io/CAbiNet/articles/CAclust.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Visualizing and Biclustering scRNA-seq data with CAbiNet","text":"","code":"#> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: MarIuX64 2.0 GNU/Linux #>  #> Matrix products: default #> BLAS:   /pkg/R-4.2.2-0/lib/R/lib/libRblas.so #> LAPACK: /pkg/R-4.2.2-0/lib/R/lib/libRlapack.so #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C         LC_TIME=C            #>  [4] LC_COLLATE=C         LC_MONETARY=C        LC_MESSAGES=C        #>  [7] LC_PAPER=C           LC_NAME=C            LC_ADDRESS=C         #> [10] LC_TELEPHONE=C       LC_MEASUREMENT=C     LC_IDENTIFICATION=C  #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] scater_1.24.0               ggplot2_3.3.0               #>  [3] scran_1.24.0                scuttle_1.8.4               #>  [5] scRNAseq_2.10.0             SingleCellExperiment_1.20.0 #>  [7] SummarizedExperiment_1.28.0 Biobase_2.58.0              #>  [9] GenomicRanges_1.50.1        GenomeInfoDb_1.34.4         #> [11] IRanges_2.32.0              S4Vectors_0.36.1            #> [13] BiocGenerics_0.44.0         MatrixGenerics_1.10.0       #> [15] matrixStats_0.63.0          CAbiNet_0.99.0              #> [17] APL_1.2.0                   BiocStyle_2.26.0            #>  #> loaded via a namespace (and not attached): #>   [1] rappdirs_0.3.3                SparseM_1.81                  #>   [3] rtracklayer_1.58.0            scattermore_0.8               #>   [5] SeuratObject_4.1.3            ragg_1.2.5                    #>   [7] tidyr_1.2.1                   bit64_4.0.5                   #>   [9] knitr_1.41                    irlba_2.3.5.1                 #>  [11] DelayedArray_0.24.0           data.table_1.14.6             #>  [13] KEGGREST_1.38.0               RCurl_1.98-1.9                #>  [15] AnnotationFilter_1.22.0       generics_0.1.3                #>  [17] GenomicFeatures_1.50.4        org.Mm.eg.db_3.16.0           #>  [19] ScaledMatrix_1.6.0            cowplot_1.1.1                 #>  [21] RSQLite_2.2.19                RANN_2.6.1                    #>  [23] future_1.30.0                 bit_4.0.5                     #>  [25] spatstat.data_3.0-0           xml2_1.3.3                    #>  [27] httpuv_1.6.7                  assertthat_0.2.1              #>  [29] viridis_0.6.2                 xfun_0.35                     #>  [31] hms_1.1.2                     jquerylib_0.1.4               #>  [33] evaluate_0.19                 promises_1.2.0.1              #>  [35] additivityTests_1.1-4.1       fansi_1.0.3                   #>  [37] restfulr_0.0.15               progress_1.2.2                #>  [39] dbplyr_2.3.0                  igraph_1.3.5                  #>  [41] DBI_1.1.3                     htmlwidgets_1.6.0             #>  [43] spatstat.geom_3.0-3           purrr_0.3.5                   #>  [45] ellipsis_0.3.2                crosstalk_1.2.0               #>  [47] dplyr_1.0.10                  bookdown_0.32                 #>  [49] biomaRt_2.54.0                deldir_1.0-6                  #>  [51] sparseMatrixStats_1.10.0      vctrs_0.5.0                   #>  [53] here_1.0.1                    ensembldb_2.22.0              #>  [55] ROCR_1.0-11                   abind_1.4-5                   #>  [57] withr_2.5.0                   cachem_1.0.6                  #>  [59] RcppEigen_0.3.3.9.3           progressr_0.12.0              #>  [61] sctransform_0.3.5             GenomicAlignments_1.34.0      #>  [63] prettyunits_1.1.1             goftest_1.2-3                 #>  [65] cluster_2.1.4                 ExperimentHub_2.4.0           #>  [67] lazyeval_0.2.2                crayon_1.5.2                  #>  [69] spatstat.explore_3.0-5        labeling_0.4.2                #>  [71] edgeR_3.40.2                  pkgconfig_2.0.3               #>  [73] vipor_0.4.5                   nlme_3.1-161                  #>  [75] ProtGenerics_1.30.0           rlang_1.0.6                   #>  [77] globals_0.16.2                lifecycle_1.0.3               #>  [79] miniUI_0.1.1.1                filelock_1.0.2                #>  [81] BiocFileCache_2.6.0           rsvd_1.0.5                    #>  [83] AnnotationHub_3.6.0           rprojroot_2.0.3               #>  [85] polyclip_1.10-4               lmtest_0.9-40                 #>  [87] graph_1.76.0                  Matrix_1.5-1                  #>  [89] zoo_1.8-11                    beeswarm_0.4.0                #>  [91] ggridges_0.5.4                png_0.1-8                     #>  [93] viridisLite_0.4.1             rjson_0.2.21                  #>  [95] bitops_1.0-7                  KernSmooth_2.23-20            #>  [97] Biostrings_2.66.0             blob_1.2.3                    #>  [99] DelayedMatrixStats_1.20.0     stringr_1.5.0                 #> [101] parallelly_1.33.0             spatstat.random_3.0-1         #> [103] beachmat_2.14.0               scales_1.2.1                  #> [105] hexbin_1.28.2                 memoise_2.0.1                 #> [107] magrittr_2.0.3                plyr_1.8.8                    #> [109] ica_1.0-3                     zlibbioc_1.44.0               #> [111] compiler_4.2.2                dqrng_0.3.0                   #> [113] BiocIO_1.8.0                  RColorBrewer_1.1-3            #> [115] fitdistrplus_1.1-8            Rsamtools_2.14.0              #> [117] cli_3.4.1                     XVector_0.38.0                #> [119] listenv_0.9.0                 patchwork_1.1.2               #> [121] pbapply_1.6-0                 MASS_7.3-58.2                 #> [123] tidyselect_1.2.0              stringi_1.7.8                 #> [125] textshaping_0.3.6             highr_0.9                     #> [127] yaml_2.3.6                    locfit_1.5-9.7                #> [129] BiocSingular_1.14.0           ggrepel_0.9.2                 #> [131] grid_4.2.2                    sass_0.4.4                    #> [133] tools_4.2.2                   future.apply_1.10.0           #> [135] parallel_4.2.2                rstudioapi_0.13               #> [137] bluster_1.6.0                 metapod_1.4.0                 #> [139] gridExtra_2.3                 farver_2.1.1                  #> [141] Rtsne_0.16                    digest_0.6.30                 #> [143] BiocManager_1.30.19           FNN_1.1.3.1                   #> [145] shiny_1.7.4                   flexclust_1.4-1               #> [147] Rcpp_1.0.10                   BiocVersion_3.16.0            #> [149] later_1.3.0                   RcppAnnoy_0.0.20              #> [151] org.Hs.eg.db_3.16.0           httr_1.4.4                    #> [153] AnnotationDbi_1.60.0          colorspace_2.1-0              #> [155] biclust_2.0.3                 XML_3.99-0.13                 #> [157] fs_1.5.2                      topGO_2.50.0                  #> [159] tensor_1.5                    reticulate_1.26               #> [161] splines_4.2.2                 statmod_1.5.0                 #> [163] uwot_0.1.14                   spatstat.utils_3.0-1          #> [165] pkgdown_2.0.7                 sp_1.5-1                      #> [167] plotly_4.10.1                 systemfonts_1.0.4             #> [169] xtable_1.8-4                  jsonlite_1.8.3                #> [171] modeltools_0.2-23             R6_2.5.1                      #> [173] pillar_1.8.1                  htmltools_0.5.4               #> [175] mime_0.12                     glue_1.6.2                    #> [177] fastmap_1.1.0                 BiocParallel_1.32.5           #> [179] BiocNeighbors_1.16.0          class_7.3-21                  #> [181] interactiveDisplayBase_1.36.0 codetools_0.2-18              #> [183] utf8_1.2.2                    lattice_0.20-45               #> [185] bslib_0.4.2                   spatstat.sparse_3.0-0         #> [187] tibble_3.1.8                  ggbeeswarm_0.7.1              #> [189] curl_4.3.3                    leiden_0.4.3                  #> [191] GO.db_3.16.0                  limma_3.54.1                  #> [193] survival_3.5-0                rmarkdown_2.19                #> [195] desc_1.4.2                    munsell_0.5.0                 #> [197] GenomeInfoDbData_1.2.9        reshape2_1.4.4                #> [199] gtable_0.3.1                  Seurat_4.3.0"},{"path":"https://vingronlab.github.io/CAbiNet/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clemens Kohl. Maintainer, author. Yan Zhao. Author. Martin Vingron. Author.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhao, Yan, Kohl, Clemens, Rosebrock, Daniel, Hu, Qinan, Hu, Yuhui, Vingron, Martin (2022). “CAbiNet: Joint Visualization Cells Genes Based Gene-Cell Graph.” bioRxiv. doi:10.1101/2022.12.20.521232, https://www.biorxiv.org/content/10.1101/2022.12.20.521232v1.","code":"@Article{,   title = {{CAbiNet}: Joint Visualization of Cells and Genes Based on a Gene-Cell Graph},   shorttitle = {CAbiNet},   author = {{Zhao} and {Yan} and {Kohl} and {Clemens} and {Rosebrock} and {Daniel} and {Hu} and {Qinan} and {Hu} and {Yuhui} and {Vingron} and {Martin}},   year = {2022},   month = {12},   day = {21},   journal = {bioRxiv},   doi = {10.1101/2022.12.20.521232},   url = {https://www.biorxiv.org/content/10.1101/2022.12.20.521232v1},   urldate = {2010},   abstract = {In routine single-cell RNA-sequencing (scRNA-seq) analysis workflows, cells are commonly visualized in 2D to show the patterns in the data. However, these visualization approaches do not give any information about the genes that define the cell groups or clusters. It is therefore desirable to display cells and genes simultaneously such that by their relative position to each other information about the genes’ expression in a cluster can be obtained. Here we propose “Correspondence Analysis based Biclustering on Networks” (CAbiNet) as a novel approach to jointly visualize cells and genes by a non-linear embedding approach, called biMAP. The biMAP allows for easy and interactive exploration of cells and their corresponding marker genes in a single plot. CabiNet additionally offers an intuitive way to perform biclustering jointly on cells and genes, providing a simplified workflow to annotate cell types on the biMAP. CAbiNet is accessible through GitHub as an R package.},   langid = {english}, }"},{"path":"https://vingronlab.github.io/CAbiNet/index.html","id":"cabinet","dir":"","previous_headings":"","what":"Biclustering and visualization of scRNAseq data","title":"Biclustering and visualization of scRNAseq data","text":"Correspondence Analysis based Biclustering Networks package provides functions visualization biclustering single-cell RNA-seq data. longer vignette explaining install use package can found : https://vingronlab.github.io/CAbiNet/","code":""},{"path":"https://vingronlab.github.io/CAbiNet/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Biclustering and visualization of scRNAseq data","text":"can install package : ⚠️ bug ggplot2 versions >3.3.0 <3.4.1 lead incorrect behaviour plot_hex_biMAP. Please make sure ggplot2 3.4.1 higher installed.","code":"# please also install this version of APL from github: devtools::install_github(\"VingronLab/APL\", ref = \"cabinet-freeze\") devtools::install_github(\"VingronLab/CAbiNet\")"},{"path":"https://vingronlab.github.io/CAbiNet/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Biclustering and visualization of scRNAseq data","text":"provide short example use package. hope provide detailed description use CAbiNet perform analysis near future.","code":"library(CAbiNet) library(APL) library(scRNAseq)   sce <- DarmanisBrainData()  # Here you might want to do some preprocessing.  # Correspondence Analysis caobj = cacomp(sce,                dims = 50,                top = 1000, # number of genes with highest inertia to keep.                python = TRUE)  # SNN graph & biclustering cabic <- caclust(obj = caobj,                  k = 10,                  loops = FALSE,                  SNN_prune = 1/15,                  mode = \"all\",                  select_genes = TRUE,                  prune_overlap = TRUE,                  overlap = 0.2,                  calc_gene_cell_kNN = FALSE,                  resolution = 1,                  algorithm = 'leiden')  sce$cabinet <- cell_clusters(cabic)  cabic <- biMAP(cabic, k = 30)  # plot results plot_biMAP(cabic, color_genes = TRUE)  # Interactive biMAP where you can mouse over the points to see their identities plot_biMAP(cabic, color_by = \"cluster\",            color_genes = TRUE,            interactive = TRUE)  plot_scatter_biMAP(cabic,                    gene_alpha = 0,                    color_by = \"cell.type\",                    meta_df = colData(sce))"},{"path":"https://vingronlab.github.io/CAbiNet/reference/CAbiNet-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CAbiNet: Biclustering and visualization of scRNAseq data — CAbiNet-package","title":"CAbiNet: Biclustering and visualization of scRNAseq data — CAbiNet-package","text":"CAbiNet allows fast robust biclustering single-cell RNA-seq Correspondence Analysis. Clustering results cells genes can conviently displayed biMAP.","code":""},{"path":[]},{"path":"https://vingronlab.github.io/CAbiNet/reference/CAbiNet-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CAbiNet: Biclustering and visualization of scRNAseq data — CAbiNet-package","text":"Maintainer: Clemens Kohl kohl@molgen.mpg.de Authors: Yan Zhao zhao@molgen.mpg.de Martin Vingron vingron@molgen.mpg.de","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/ComputeSNNasym.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates SNN from adjacency matrix with uneven number of neighbours per\nrow. — ComputeSNNasym","title":"Calculates SNN from adjacency matrix with uneven number of neighbours per\nrow. — ComputeSNNasym","text":"Calculates SNN adjacency matrix uneven number neighbours per row.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/ComputeSNNasym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates SNN from adjacency matrix with uneven number of neighbours per\nrow. — ComputeSNNasym","text":"","code":"ComputeSNNasym(SNN, prune, mode)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/ComputeSNNasym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates SNN from adjacency matrix with uneven number of neighbours per\nrow. — ComputeSNNasym","text":"SNN sparse matrix (adjacency matrix) prune numeric. Jaccard similarity edges removed. mode type neighboring vertices use calculating similarity '  scores(Jaccard Index). Three options: \"\", \"\" \"\": ' * \"\": Select neighbouring vertices -going edges; ' * \"\": Selecting neighbouring vertices -coming edges; ' * \"\": Selecting neigbouring vertices -coming -going edges.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/NormLaplacian.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Normalized Graph Laplacian — NormLaplacian","title":"Calculate Normalized Graph Laplacian — NormLaplacian","text":"Calculate Normalized graph laplacian input adjacency matrix, graph laplacian L = -D^(-1/2)AD^(-1/2), D diagonal matrix row sums entries.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/NormLaplacian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Normalized Graph Laplacian — NormLaplacian","text":"","code":"NormLaplacian(adj)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/NormLaplacian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Normalized Graph Laplacian — NormLaplacian","text":"adj adjacency matix type 'matrix/array'.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/NormLaplacian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Normalized Graph Laplacian — NormLaplacian","text":"sparsed normalized graph laplacian matrix type \"dgCmatrix\".","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/aR_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"calculates association ratio between to columns in a matrix. — aR_metric","title":"calculates association ratio between to columns in a matrix. — aR_metric","text":"calculates association ratio columns matrix.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/aR_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"calculates association ratio between to columns in a matrix. — aR_metric","text":"","code":"aR_metric(matrix, origin, target)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/aR_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"calculates association ratio between to columns in a matrix. — aR_metric","text":"matrix matrix origin origin column (name index) target target column (name index)","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/aR_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"calculates association ratio between to columns in a matrix. — aR_metric","text":"Returns association ratio columns origin target.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/add_caclust_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"Add caclust object to SingleCellExperiment object — add_caclust_sce","title":"Add caclust object to SingleCellExperiment object — add_caclust_sce","text":"Add caclust clustering results SingleCellExperiment object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/add_caclust_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add caclust object to SingleCellExperiment object — add_caclust_sce","text":"","code":"add_caclust_sce(sce, caclust, caclust_meta_name = \"caclust\")"},{"path":"https://vingronlab.github.io/CAbiNet/reference/add_caclust_sce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add caclust object to SingleCellExperiment object — add_caclust_sce","text":"sce SingleCellExperiment object caclust CAclust::caclust object caclust_meta_name column name listed colData(sce), rowData(sce), metadata(sce)","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/add_caclust_sce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add caclust object to SingleCellExperiment object — add_caclust_sce","text":"SingleCellExperiment caclust object stored.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/add_zero_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an extra 0 dimension to vector — add_zero_dim","title":"Add an extra 0 dimension to vector — add_zero_dim","text":"Add extra 0 dimension vector","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/add_zero_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an extra 0 dimension to vector — add_zero_dim","text":"","code":"add_zero_dim(vectors)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/add_zero_dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an extra 0 dimension to vector — add_zero_dim","text":"vectors Matrix row vectors","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/annotate_biclustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform gene overrepresentation analysis and annotate biclusters. — annotate_biclustering","title":"Perform gene overrepresentation analysis and annotate biclusters. — annotate_biclustering","text":"Wrapper function `per_cluster_goa` `annotate_by_goa`.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/annotate_biclustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform gene overrepresentation analysis and annotate biclusters. — annotate_biclustering","text":"","code":"annotate_biclustering(   obj,   universe,   org,   set = \"CellMarker\",   alpha = 0.05,   min_size = 10,   max_size = 500,   verbose = TRUE,   ... )  # S4 method for caclust annotate_biclustering(   obj,   universe,   org,   set = \"CellMarker\",   alpha = 0.05,   min_size = 10,   max_size = 500,   verbose = TRUE,   ... )  # S4 method for SingleCellExperiment annotate_biclustering(   obj,   universe,   org,   set = \"CellMarker\",   alpha = 0.05,   min_size = 10,   max_size = 500,   verbose = TRUE,   ...,   caclust_meta_name = \"caclust\" )  # S4 method for caclust annotate_biclustering(   obj,   universe,   org,   set = \"CellMarker\",   alpha = 0.05,   min_size = 10,   max_size = 500,   verbose = TRUE,   ... )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/annotate_biclustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform gene overrepresentation analysis and annotate biclusters. — annotate_biclustering","text":"obj Either `caclust` `SingleCellExperiment` object. universe genes data set. org Short name organism. \"mm\" mouse, \"hs\" human. set Name gene set. Currently supports \"CellMarker\" alpha Adjusted p-value cutoff. results padj < alpha used. min_size Min. number genes gene set. max_size Max number genes gene set. Set Inf want keep genes. verbose Toggles verbosity warnings. ... arguments. caclust_meta_name Name caclust object stored metadata SingleCellExperiment object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/annotate_biclustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform gene overrepresentation analysis and annotate biclusters. — annotate_biclustering","text":"object type `caclust` annotated biclusters.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/annotate_biclustering.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform gene overrepresentation analysis and annotate biclusters. — annotate_biclustering","text":"`annotate_biclustering` performs per cluster GOA hypergeometric  annotates biclustering results CAbiNet.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/annotate_by_goa.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate CAbiNet results by gene overrepresentation\n analysis results. — annotate_by_goa","title":"Annotate CAbiNet results by gene overrepresentation\n analysis results. — annotate_by_goa","text":"`annotate_by_goa` takes biclustering results outputted `caclust` annotates gene overrepresentation analysis results (goa). Conflicts clusters  highest ranking gene set solved  Hungarian/Munkres algorithm.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/annotate_by_goa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate CAbiNet results by gene overrepresentation\n analysis results. — annotate_by_goa","text":"","code":"annotate_by_goa(obj, goa_res, alpha = 0.05)  # S4 method for caclust annotate_by_goa(obj, goa_res, alpha = 0.05)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/annotate_by_goa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate CAbiNet results by gene overrepresentation\n analysis results. — annotate_by_goa","text":"obj Biclustering results type `caclust` goa_res List goa results bicluster. alpha Adjusted p-value cutoff. results padj < alpha used.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/annotate_by_goa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate CAbiNet results by gene overrepresentation\n analysis results. — annotate_by_goa","text":"Object type `caclust` annotated biclusters.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/as.caclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Try converting to caclust object from list or biclustlib. — as.caclust","title":"Try converting to caclust object from list or biclustlib. — as.caclust","text":"Converts object caclust object possible.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/as.caclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try converting to caclust object from list or biclustlib. — as.caclust","text":"","code":"as.caclust(obj)  # S4 method for list as.caclust(obj)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/as.caclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try converting to caclust object from list or biclustlib. — as.caclust","text":"obj list elements named caclust slots.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/as.caclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try converting to caclust object from list or biclustlib. — as.caclust","text":"caclust object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/as.caclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Try converting to caclust object from list or biclustlib. — as.caclust","text":"TODO","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/assign_clusters_GMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign cluster to cells/genes — assign_clusters_GMM","title":"Assign cluster to cells/genes — assign_clusters_GMM","text":"Based probability cutoff genes/cells assigned clusters probability higher 'cutoff'.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/assign_clusters_GMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign cluster to cells/genes — assign_clusters_GMM","text":"","code":"assign_clusters_GMM(caclust_obj, type = \"genes\", cutoff = 0.5)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/assign_clusters_GMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign cluster to cells/genes — assign_clusters_GMM","text":"caclust_obj caclust object type Either \"cell\" \"gene\". cutoff Probability cutoff.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/assign_clusters_GMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign cluster to cells/genes — assign_clusters_GMM","text":"logical matrix indicating gene belongs cluster.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/assign_cts.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign cell types to clusters using the Hungarian algorithm. — assign_cts","title":"Assign cell types to clusters using the Hungarian algorithm. — assign_cts","text":"Uses hungarian algorithm (assignment problem) assign cell type gene set overrepresentation analysis one (one) cluster.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/assign_cts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign cell types to clusters using the Hungarian algorithm. — assign_cts","text":"","code":"assign_cts(goa_res)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/assign_cts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign cell types to clusters using the Hungarian algorithm. — assign_cts","text":"goa_res List goa results bicluster.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/assign_cts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign cell types to clusters using the Hungarian algorithm. — assign_cts","text":"data frame assigned cell types adjusted p-values.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/augment_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms vectors such that the max. inner product (MIP) search is\nequal to a NN search with euclidean distances. — augment_vector","title":"Transforms vectors such that the max. inner product (MIP) search is\nequal to a NN search with euclidean distances. — augment_vector","text":"Transforms vectors max. inner product (MIP) search equal NN search euclidean distances.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/augment_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms vectors such that the max. inner product (MIP) search is\nequal to a NN search with euclidean distances. — augment_vector","text":"","code":"augment_vector(vectors)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/augment_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms vectors such that the max. inner product (MIP) search is\nequal to a NN search with euclidean distances. — augment_vector","text":"vectors Matrix row vectors","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/augment_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms vectors such that the max. inner product (MIP) search is\nequal to a NN search with euclidean distances. — augment_vector","text":"new matrix row vectors one additional (first) dimension square root difference squared max. vector norm squared vector norm. makes norm vectors effectively .","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/augment_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transforms vectors such that the max. inner product (MIP) search is\nequal to a NN search with euclidean distances. — augment_vector","text":"See also: https://github.com/benfred/implicit/blob/42832574f1a29c71b3263e219fc471fc97328552/implicit/utils.py#L60 https://towardsdatascience.com/maximum-inner-product-search-using-nearest-neighbor-search-algorithms-c125d24777ef","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/augment_vector.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transforms vectors such that the max. inner product (MIP) search is\nequal to a NN search with euclidean distances. — augment_vector","text":"Yoram Bachrach, Yehuda Finkelstein, Ran Gilad-Bachrach, Liran Katzir,  Noam Koenigstein, Nir Nice, Ulrich Paquet.  Speeding Xbox recommender system using euclidean transformation  inner-product spaces. RecSys 2014","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute biMAP — biMAP","title":"Compute biMAP — biMAP","text":"function takes either caclust SingleCellExperimentas input stores biMAP \"bimap\" slot caclust object. SingleCellExperiment provided caclust object stored metadata.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute biMAP — biMAP","text":"","code":"biMAP(obj, k = 30, rand_seed = 2358, method = \"SNNdist\", ...)  # S4 method for caclust biMAP(obj, k = 30, rand_seed = 2358, method = \"SNNdist\", ...)  # S4 method for SingleCellExperiment biMAP(   obj,   k = 30,   rand_seed = 2358,   method = \"SNNdist\",   ...,   caclust_meta_name = \"caclust\" )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute biMAP — biMAP","text":"obj caclust object SingleCellExperiment object k integer. Number nearest neighbours use compute UMAP. rand_seed integer. Random seed UMAP. method Can either \"SNNdist\" \"spectral\". ... arguments caclust_meta_name name caclust object stored metadata (SingleCellExperiment object).","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/biMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute biMAP — biMAP","text":"caclust object SingleCellExperiment object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/biMAP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute biMAP — biMAP","text":"biMAP cell gene embeddings can calculated via different methods controlled parameter method: 'SNNdist'(Default): run UMAP distance matrix cell-gene SNN graph built caclust, '1-adj(SNN)'. 'spectral': run UMAP selected eigenvectors cell-gene graph laplacian (eligiable algorithm set 'spectral' 'caclust' function)","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/biMAP_plotter.html","id":null,"dir":"Reference","previous_headings":"","what":"biMAP plotter — biMAP_plotter","title":"biMAP plotter — biMAP_plotter","text":"function plots different variants biMAP","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/biMAP_plotter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"biMAP plotter — biMAP_plotter","text":"","code":"biMAP_plotter(   caclust,   color_by = \"cluster\",   meta_df = NULL,   type = \"scatter\",   cell_size = 1,   gene_size = 3,   cell_alpha = 0.5,   gene_alpha = 1,   hex_n = 40,   min_bin = 2,   show_density = FALSE,   contour_n = 5,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   colors = NULL,   plotly = FALSE,   max.overlaps = 12 )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/biMAP_plotter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"biMAP plotter — biMAP_plotter","text":"caclust caclust object biMAP stored. color_by Either \"type\" \"cluster\". \"type\" colors type (cell gene) \"cluster\" colors assigned cluster. meta_df provided column data.frame can specified. meta_df optional. data.frame either gene cell names () rownames column named `name` column name `color_by`. type Determines kind plot outputted. Either \"scatter\" (scatter plot), \"contour\" (density contour plot) \"hex\" (binned hexagonals). cell_size integer. Size cells plot. gene_size integer. Size genes plot. cell_alpha numeric. Alpha value cells (0 1). gene_alpha numeric. Alpha value genes (0 1). hex_n integer. Number hexagonal bins partition x-axis. min_bin integer. bins `min_bin` cells plotted. show_density logical. alpha value plot type \"hex\" adjusted number cells bin? contour_n integer. Number contour lines plot. color_genes logical. TRUE colors genes color_by. label_groups logical. TRUE puts group label median coordinates point. group_label_size integer. Size group label. label_marker_genes logical character vector. TRUE, names detected marker genes displayed. character vector, given marker genes labeled. colors Vector hexadecimal color codes length categories defined color_by longer. NULL ignored. plotly TRUE hex plot labels per hexbin made. max.overlaps Exclude text labels overlap many things.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/biMAP_plotter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"biMAP plotter — biMAP_plotter","text":"biMAP plot ggplot object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/bicplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of 2D CA projection of the clustering results. — bicplot","title":"Plot of 2D CA projection of the clustering results. — bicplot","text":"Plots first 2 dimensions rows columns plot.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/bicplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of 2D CA projection of the clustering results. — bicplot","text":"","code":"bicplot(   obj,   xdim = 1,   ydim = 2,   princ_coords = 1,   row_labels = NULL,   col_labels = NULL,   type = \"ggplot\",   show_all = TRUE,   show_rm = FALSE,   ... )  # S4 method for caclust bicplot(   obj,   xdim = 1,   ydim = 2,   princ_coords = 1,   row_labels = NULL,   col_labels = NULL,   type = \"ggplot\",   show_all = TRUE,   show_rm = FALSE,   ...,   caobj )  # S4 method for SingleCellExperiment bicplot(   obj,   xdim = 1,   ydim = 2,   princ_coords = 1,   row_labels = NULL,   col_labels = NULL,   type = \"ggplot\",   show_all = TRUE,   show_rm = FALSE,   ...,   caclust_meta_name = \"caclust\",   cacomp_meta_name = \"CA\" )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/bicplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of 2D CA projection of the clustering results. — bicplot","text":"obj caclust SingleCellExperiment object containing clustering results. SingleCellExperiment also CA dimensional reduction. xdim Integer. dimension x-axis. Default 1. ydim Integer. dimension y-axis. Default 2. princ_coords Integer. 1 principal coordinates used rows, 2 columns. Default 1 (rows). row_labels Numeric vector. Indices rows label added (label stored rownames). Default NULL. col_labels Numeric vector. Indices columns label added (label stored colnames). Default NULL (columns). type String. Type plot draw. Either \"ggplot\" \"ggplotly\". Default \"ggplot\". show_all logical. FALSE cells/genes col_metadata/ row_metadata plotted. *_metadata NULL, cell genes respectively still plotted. show_rm Show pruned genes biclustering. ... arguments. caobj object class \"cacomp\" relevant standardized principal coordinates calculated. caclust_meta_name name caclust object stored metadata(SingleCellExperiment object). Default: 'caclust.' cacomp_meta_name Character. name cacomp object stored metadata(SingleCellExperiment object). Default: 'caobj'.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/bicplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of 2D CA projection of the clustering results. — bicplot","text":"Plot class \"ggplotly\" \"ggplot\".","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/bicplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot of 2D CA projection of the clustering results. — bicplot","text":"Choosing type \"ggplotly\" generate interactive html plot package ggplotly. Type \"ggplot\" generates static plot. Depending whether `princ_coords` set 1 2 either principal coordinates either rows (1) columns (2) chosen. standard coordinates plotted (assymetric biplot). Labels rows columns stored row column names respectively.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/ca_biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute biMAP basedon CA results — ca_biMAP","title":"Compute biMAP basedon CA results — ca_biMAP","text":"function takes either `caclust` `cacomp` object input computes biMAP embedings cells genes basis singular vectors CA.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/ca_biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute biMAP basedon CA results — ca_biMAP","text":"","code":"ca_biMAP(   obj,   caobj,   k = 30,   rand_seed = 2358,   use_SNN = TRUE,   features = NULL,   ... )  # S4 method for caclust,cacomp ca_biMAP(   obj,   caobj,   k = 30,   rand_seed = 2358,   use_SNN = TRUE,   features = NULL,   ... )  # S4 method for SingleCellExperiment,ANY ca_biMAP(   obj,   caobj = NULL,   k = 30,   rand_seed = 2358,   use_SNN = TRUE,   features = NULL,   ...,   caclust_meta_name = \"caclust\",   cacomp_meta_name = \"CA\" )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/ca_biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute biMAP basedon CA results — ca_biMAP","text":"obj `caclust` object `SingleCellExperiment` object `caclust` `cacomp` objects stored metadata. caobj `cacomp` object. k integer. Number nearest neighbours use compute UMAP. rand_seed integer. Random seed UMAP. use_SNN TRUE/FALSE. parameter works method == 'ca'. TRUE, calculate bimap embedding genes cells contained SNN graph together given 'fearures' . FALSE, calculate bimap embedding cells contained SNN graph together given 'fearures' . features character/vector gene names. parameter works method == 'ca'. 'ca' method allows visualization genes absent SNN graph, 'features' genes detected biclustering algorithm, genes goes CA analysis. Setting use_SNN = FALSE allows users visualization feature genes user defined/interested. ... arguments caclust_meta_name name caclust object stored metadata(obj) cacomp_meta_name name cacomp object stored metadata(obj)","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/ca_biMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute biMAP basedon CA results — ca_biMAP","text":"caclust object SingleCellExperiment objects","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/ca_biMAP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute biMAP basedon CA results — ca_biMAP","text":"biMAP embeddings computed basis singular vectors Correspondence Analysis. `SingleCellExperiment` object `caclust` `cacomp` objects stored provided argument `caobj` required.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/caclust-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class that contains all elements needed for CA. — caclust-class","title":"An S4 class that contains all elements needed for CA. — caclust-class","text":"Class store biclustering clustering results.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/caclust-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class that contains all elements needed for CA. — caclust-class","text":"cell_clusters factors. assigned cell clusters cell names  names attribute. gene_clusters factors. assigned gene clusters gene names  names attribute. SNN sparse shared nearest neighbours matrix. Values indicate jaccard similarity. parameters List used parameters function name results generated. eigen matrix, Slot storing eigenvectors spectral clustering cell_prob matrix. Matrix stores probabilities cell belongs cluster. filled running spectral clustering GMM. gene_prob matrix. Matrix stores probabilities gene belongs cluster. filled running spectral clustering GMM. cell_idxs integer. Indices cells SNN adjacency matrix. gene_idxs integer. Indices genes SNN adjacency matrix. bimap data.frame. Data frame storing biMAP coordinates (x, y)  type (cell gene) well assigned clusters.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/caclust.html","id":null,"dir":"Reference","previous_headings":"","what":"caclust — caclust","title":"caclust — caclust","text":"`caclust()` performs biclustering either \"cacomp\" \"SingleCellExperiment\" object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/caclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"caclust — caclust","text":"","code":"caclust(   obj,   k,   algorithm = \"leiden\",   SNN_prune = 1/15,   loops = FALSE,   mode = \"out\",   select_genes = TRUE,   prune_overlap = TRUE,   overlap = 0.2,   calc_gene_cell_kNN = FALSE,   resolution = 1,   marker_genes = NULL,   n.int = 10,   rand_seed = 2358,   use_gap = TRUE,   nclust = NULL,   spectral_method = \"kmeans\",   iter_max = 10,   num_seeds = 10,   return_eig = TRUE,   dims = NULL,   cast_to_dense = TRUE,   ... )  # S4 method for cacomp caclust(   obj,   k,   algorithm = \"leiden\",   SNN_prune = 1/15,   loops = FALSE,   mode = \"out\",   select_genes = TRUE,   prune_overlap = TRUE,   overlap = 0.2,   calc_gene_cell_kNN = FALSE,   resolution = 1,   marker_genes = NULL,   n.int = 10,   rand_seed = 2358,   use_gap = TRUE,   nclust = NULL,   spectral_method = \"kmeans\",   iter_max = 10,   num_seeds = 10,   return_eig = TRUE,   dims = NULL,   cast_to_dense = TRUE,   method = BiocNeighbors::KmknnParam(),   BPPARAM = BiocParallel::SerialParam(),   leiden_pack = \"igraph\",   ... )  # S4 method for SingleCellExperiment caclust(   obj,   k,   algorithm = \"leiden\",   SNN_prune = 1/15,   loops = FALSE,   mode = \"out\",   select_genes = TRUE,   prune_overlap = TRUE,   overlap = 0.2,   calc_gene_cell_kNN = FALSE,   resolution = 1,   marker_genes = NULL,   n.int = 10,   rand_seed = 2358,   use_gap = TRUE,   nclust = NULL,   spectral_method = \"kmeans\",   iter_max = 10,   num_seeds = 10,   return_eig = TRUE,   dims = NULL,   cast_to_dense = TRUE,   method = BiocNeighbors::KmknnParam(),   BPPARAM = BiocParallel::SerialParam(),   leiden_pack = \"igraph\",   ...,   caclust_meta_name = \"caclust\",   cacomp_meta_name = \"CA\" )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/caclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"caclust — caclust","text":"obj cacomp object SingleCellExperiment object k Either integer (k subgraphs) vector exactly four integers specifying order: k_c cell-cell kNN-graph, k_g gene-gene kNN-graph, k_cg cell-gene kNN-graph, k_gc gene-cell kNN-graph. algorithm Character. Algorithm clustering. Options \"leiden\" \"spectral\". Defalut: 'leiden'. SNN_prune numeric. Value 0-1. Sets cutoff acceptable jaccard similarity scores neighborhood overlap vertices SNN. Edges values less set 0. default value 1/15. loops TRUE/FALSE. TRUE self-loops allowed, otherwise . mode type neighboring vertices use calculating similarity scores(Jaccard Index). Three options: \"\", \"\" \"\": \"\": Selecting neighbouring vertices -going edges; \"\": Selecting neighbouring vertices -coming edges; \"\": Selecting neigbouring vertices -coming -going edges. select_genes TRUE/FALSE. genes selected whether edge cell-gene kNN graph? prune_overlap TRUE/FALSE. TRUE edges genes share less overlap genes nearest neighbours cell removed. Pruning performed select_genes = TRUE. overlap Numeric 0 1. Overlap cutoff applied prune_overlap = TRUE. calc_gene_cell_kNN TRUE/FALSE. TRUE cell-gene graph calculated choosing k_gc nearest cells gene. FALSE cell-gene graph transposed. resolution float number. Resolution leiden algorithm. marker_genes character. Optional. Names known marker genes excempt pruning graph kept. n.int Integer. Number iterations leiden algorithm. rand_seed integer. Random seed. use_gap Logical, TRUE/FALSE. TRUE, 'eigengap' method used find important eigenvector automatically, number output clusters equals number selected eigenvectors. FALSE, 'nclust'(integer) specified. eigenvectors corresponding smallest 'nclust' eigenvalues selcted 'nclust' clusters detected skmeans/kmeans/GMM. nclust Integer. Number clusters. spectral_method character. Name method cluster eigenvectors. Can following 3: \"kmeans\": k-means clustering \"skmeans\": spherical k-means clustering \"GMM\": Gaussian-Mixture-Model fuzzy clustering. iter_max Number iterations k-means clustering GMM. num_seeds Number times k-means clustering repeated. return_eig Logical. Whether return eigenvectors store caclust-object. dims Integer. Number dimensions choose SVD graph laplacian. cast_to_dense logical. Casting sparse SNN adjacency matrix dense speeds leiden algorithm. ... arguments method BiocNeighbors::BiocNeighborParam object specifying algorithm use. see Details. BPPARAM BiocParallel settings parameter. default single core BiocParallel::SerialParam() parameters can passed. leiden_pack character. Optional values 'igraph'(default) 'leiden', package used leiden clustering. caclust_meta_name name caclust object stored metadata(SingleCellExperiment object). Default: 'caclust.' cacomp_meta_name Character. name cacomp object stored metadata(SingleCellExperiment object). Default: 'caobj'.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/caclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"caclust — caclust","text":"caclust object SingleCellExperiment object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/caclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"caclust — caclust","text":"Convenient wrapper around `make_SNN` `run_leiden`/`run_spectral`. `run_caclust` takes cacomp object biclusters cells genes.","code":""},{"path":[]},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_assR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Association Ratio — calc_assR","title":"Calculate Association Ratio — calc_assR","text":"Calculate Association Ratio","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_assR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Association Ratio — calc_assR","text":"","code":"calc_assR(caobj, direction = \"cells-genes\")"},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_assR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Association Ratio — calc_assR","text":"caobj cacomp object principal standard coordinates calculated. direction Either \"cells\" \"genes\". \"cells-genes\" association ratio gene cell calculated. \"genes-cells\" assoc. ratio cell gene calculated.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_assR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Association Ratio — calc_assR","text":"Matrix pairwise association ratios.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances for bigraph — calc_distances","title":"Calculate distances for bigraph — calc_distances","text":"Calculate distances bigraph","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances for bigraph — calc_distances","text":"","code":"calc_distances(caobj)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances for bigraph — calc_distances","text":"caobj cacomp object principal standard coordinates calculated.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances for bigraph — calc_distances","text":"List elements: \"cc\": cell-cell euclidean distances \"gg\": gene-gene euclidean distances \"cg\": cell-gene association ratio \"gc\": gene-cell association ratio","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_euclidean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate euclidean distance — calc_euclidean","title":"Calculate euclidean distance — calc_euclidean","text":"Calculates euclidean distance.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_euclidean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate euclidean distance — calc_euclidean","text":"","code":"calc_euclidean(mat)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_euclidean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate euclidean distance — calc_euclidean","text":"mat matrix.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_euclidean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate euclidean distance — calc_euclidean","text":"Matrix pairwise euclidean distances.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"WIP replacement for `determine_overlap` function — calc_overlap","title":"WIP replacement for `determine_overlap` function — calc_overlap","text":"c++ implementation calculating cell-neighour-overlapping among k nearest cell neighbours gene.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"WIP replacement for `determine_overlap` function — calc_overlap","text":"","code":"calc_overlap(cc_adj, cg_adj, threshold)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"WIP replacement for `determine_overlap` function — calc_overlap","text":"cc_adj sparse matrix (dgCMatrix), cell-cell adjacency matrix cg_adj sparse matrix (dgCMatrix), cell-gene adjacency matrix threshold numeric value 0 1. cutoff cell-nqighour-overlapping gene.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_overlap_deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated, slower old version of calc_overlap. Only included for testing. — calc_overlap_deprecated","title":"Deprecated, slower old version of calc_overlap. Only included for testing. — calc_overlap_deprecated","text":"Deprecated, slower old version calc_overlap. included testing.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_overlap_deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated, slower old version of calc_overlap. Only included for testing. — calc_overlap_deprecated","text":"","code":"calc_overlap_deprecated(cc_adj, cg_adj)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/calc_overlap_deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated, slower old version of calc_overlap. Only included for testing. — calc_overlap_deprecated","text":"cc_adj cell-cell graph adjacency matrix. cg_adj cell-gene graph adjacency matrix.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/cell_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cell clusters — cell_clusters","title":"Get cell clusters — cell_clusters","text":"Get cell clusters","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/cell_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cell clusters — cell_clusters","text":"","code":"cell_clusters(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/cell_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cell clusters — cell_clusters","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/cellmarker_v2.html","id":null,"dir":"Reference","previous_headings":"","what":"CellMarker V2 — cellmarker_v2","title":"CellMarker V2 — cellmarker_v2","text":"CellMarker V2 obtained : http://bio-bigdata.hrbmu.edu.cn/CellMarker/CellMarker_download_files/file/Cell_marker_All.xlsx Unprocessed data.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/cellmarker_v2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CellMarker V2 — cellmarker_v2","text":"","code":"cellmarker_v2"},{"path":"https://vingronlab.github.io/CAbiNet/reference/cellmarker_v2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CellMarker V2 — cellmarker_v2","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 96074 rows 20 columns.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/check_caclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if caclust-class was constructed correctly — check_caclust","title":"Checks if caclust-class was constructed correctly — check_caclust","text":"Checks caclust-class constructed correctly","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/check_caclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if caclust-class was constructed correctly — check_caclust","text":"","code":"check_caclust(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/check_caclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if caclust-class was constructed correctly — check_caclust","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/check_caclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if caclust-class was constructed correctly — check_caclust","text":"object valid caclust object returns TRUE, otherwise errors.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/check_caobj_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"check_caobj_sce — check_caobj_sce","title":"check_caobj_sce — check_caobj_sce","text":"Check cacomp object already added SingleCellExperiment object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/check_caobj_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_caobj_sce — check_caobj_sce","text":"","code":"check_caobj_sce(sce, cacomp_meta_name = \"CA\")"},{"path":"https://vingronlab.github.io/CAbiNet/reference/check_caobj_sce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_caobj_sce — check_caobj_sce","text":"sce SingleCellExperiment object cacomp_meta_name Character. Name cacomp slpt sce object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/check_caobj_sce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_caobj_sce — check_caobj_sce","text":"TRUE cacomp object stored, FALSE otherwise.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/contour_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"internal helper to plot contour biMAP — contour_plot","title":"internal helper to plot contour biMAP — contour_plot","text":"internal helper plot contour biMAP","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/contour_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"internal helper to plot contour biMAP — contour_plot","text":"","code":"contour_plot(   umap_cells,   umap_genes,   color_by,   color_genes,   colors,   interact_genes,   gene_size,   gene_alpha,   contour_n )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/contour_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"internal helper to plot contour biMAP — contour_plot","text":"umap_cells biMAP coordinates data.frame subsetted cells. umap_genes biMAP coordinates data.frame subsetted genes. color_by Either \"type\" \"cluster\". \"type\" colors type (cell gene) \"cluster\" colors assigned cluster. meta_df provided column data.frame can specified. color_genes logical. TRUE colors genes color_by. colors Vector hexadecimal color codes length categories defined color_by longer. NULL ignored. interact_genes character string text labels genes interactive plots. gene_size integer. Size genes plot. gene_alpha numeric. Alpha value genes (0 1). contour_n integer. Number contour lines plot.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/contour_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"internal helper to plot contour biMAP — contour_plot","text":"contour plot ggplot object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/convert_to_biclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts CAclust results to biclustlib results — convert_to_biclust","title":"Converts CAclust results to biclustlib results — convert_to_biclust","text":"Converts CAclust results biclustlib results","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/convert_to_biclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts CAclust results to biclustlib results — convert_to_biclust","text":"","code":"convert_to_biclust(caclust)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/convert_to_biclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts CAclust results to biclustlib results — convert_to_biclust","text":"caclust caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/convert_to_biclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts CAclust results to biclustlib results — convert_to_biclust","text":"object type \"Biclust\".","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/create_bigraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine kNN graphs to large cell-gene adjecency matrix — create_bigraph","title":"Combine kNN graphs to large cell-gene adjecency matrix — create_bigraph","text":"Builds single adjacency matrix consisting cells genes 4 seperate sub kNN-graphs.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/create_bigraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine kNN graphs to large cell-gene adjecency matrix — create_bigraph","text":"","code":"create_bigraph(   caobj,   k_c,   k_g,   k_cg,   k_gc,   loops = FALSE,   select_genes = TRUE,   prune_overlap = TRUE,   overlap = 0.2,   calc_gene_cell_kNN = FALSE,   marker_genes = NULL,   method = BiocNeighbors::KmknnParam(),   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/create_bigraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine kNN graphs to large cell-gene adjecency matrix — create_bigraph","text":"caobj cacomp object standard principal coordinates calculated. k_c k cell-cell kNN, integer. k_g k gene-gene kNN, integer. k_cg k cell-gene kNN, integer. k_gc k gene-cell kNN, interger. loops TRUE/FALSE. TRUE self-loops allowed, otherwise . select_genes TRUE/FALSE. genes selected whether edge cell-gene kNN graph? prune_overlap TRUE/FALSE. TRUE edges genes share less overlap genes nearest neighbours cell removed. Pruning performed select_genes = TRUE. overlap Numeric 0 1. Overlap cutoff applied prune_overlap = TRUE. calc_gene_cell_kNN TRUE/FALSE. TRUE cell-gene graph calculated choosing k_gc nearest cells gene. FALSE cell-gene graph transposed. marker_genes character. Optional. Names known marker genes excempt pruning graph kept. method BiocNeighbors::BiocNeighborParam object specifying algorithm use. see Details. BPPARAM BiocParallel settings parameter. default single core BiocParallel::SerialParam() parameters can passed.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/create_bigraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine kNN graphs to large cell-gene adjecency matrix — create_bigraph","text":"Adjacency matrix type dgCMatrix. combined adjacency matrix consists cell-cell graph, gene-gene graph cell-gene/gene-cell graph.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/create_bigraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine kNN graphs to large cell-gene adjecency matrix — create_bigraph","text":"method kNN algorithm defined BiocNeighbors::BiocNeighborParam. exact kNN search use BiocNeighbors::KmknnParam() BiocNeighbors::VptreeParam().","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/determine_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines the overlap of chosen genes between nearest neighbour cells.\nIt works faster on sparse matrix than on dense matrix. — determine_overlap","title":"Determines the overlap of chosen genes between nearest neighbour cells.\nIt works faster on sparse matrix than on dense matrix. — determine_overlap","text":"Determines many genes shared (edge) neighbouring cells cells dataset.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/determine_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines the overlap of chosen genes between nearest neighbour cells.\nIt works faster on sparse matrix than on dense matrix. — determine_overlap","text":"","code":"determine_overlap(cg_adj, cc_adj)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/determine_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines the overlap of chosen genes between nearest neighbour cells.\nIt works faster on sparse matrix than on dense matrix. — determine_overlap","text":"cg_adj cell-gene adjacency matrix cc_adj cell-cell adjacency matrix","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/determine_overlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines the overlap of chosen genes between nearest neighbour cells.\nIt works faster on sparse matrix than on dense matrix. — determine_overlap","text":"Matrix (cells x genes) showing overlap gene nearest neighbour cells.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/eigengap.html","id":null,"dir":"Reference","previous_headings":"","what":"Detecting eigengap. — eigengap","title":"Detecting eigengap. — eigengap","text":"Searching largest gap conjuncted eigenvalues sorted ascending order, important eigenvalues eigenvectors ones detected eigengap.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/eigengap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detecting eigengap. — eigengap","text":"","code":"eigengap(e, v)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/eigengap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detecting eigengap. — eigengap","text":"e Eigenvalues type 'vector' v Eigenvector matirx type 'matrix/array' whose columns single eigenvectors.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/eigengap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detecting eigengap. — eigengap","text":"selected important eigenvectors downstream clustering, type 'matrix/array'.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/feature_biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"plot biMAP with gene expression — feature_biMAP","title":"plot biMAP with gene expression — feature_biMAP","text":"plot biMAP gene expression","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/feature_biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot biMAP with gene expression — feature_biMAP","text":"","code":"feature_biMAP(   sce,   caclust,   feature,   color_cells_by = \"expression\",   assay = \"logcounts\",   gene_alpha = 0.5,   cell_alpha = 0.8,   gene_size = 1,   cell_size = 1,   label_size = 4 )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/feature_biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot biMAP with gene expression — feature_biMAP","text":"sce SinleCellExperiment object caclust caclust object feature character. Name gene visualize color_cells_by character. Default: expression assay character. Name assay SingleCellExperiment used visualization. gene_alpha numeric. transparent value gene points. cell_alpha numeric. transparent value cell points. gene_size numeric. size gene points. cell_size numeric. size cell points. label_size numeric. Size text label.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/filter_gene_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter gene sets by size — filter_gene_sets","title":"Filter gene sets by size — filter_gene_sets","text":"function cuts removes gene sets certain size.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/filter_gene_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter gene sets by size — filter_gene_sets","text":"","code":"filter_gene_sets(gene_sets, min_size = 10, max_size = 500)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/filter_gene_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter gene sets by size — filter_gene_sets","text":"gene_sets named list gene sets (name gene set, element list contains vector genes) min_size Min. number genes gene set. max_size Max number genes gene set. Set Inf want keep genes.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/filter_gene_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter gene sets by size — filter_gene_sets","text":"Filtered list gene sets.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/format_gene_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes long format gene set data frame into a named list of gene sets. — format_gene_sets","title":"Changes long format gene set data frame into a named list of gene sets. — format_gene_sets","text":"Takes data frame 2 columns (gene set name gene name) accumulates genes gene set list element.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/format_gene_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes long format gene set data frame into a named list of gene sets. — format_gene_sets","text":"","code":"format_gene_sets(gene_sets)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/format_gene_sets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changes long format gene set data frame into a named list of gene sets. — format_gene_sets","text":"gene_sets data frame first column gene set names second column gene symbol. Long format expected.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/format_gene_sets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Changes long format gene set data frame into a named list of gene sets. — format_gene_sets","text":"named list gene sets names genes vectors.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/gene_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get gene clusters — gene_clusters","title":"Get gene clusters — gene_clusters","text":"Get gene clusters","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/gene_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get gene clusters — gene_clusters","text":"","code":"gene_clusters(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/gene_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get gene clusters — gene_clusters","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_bimap.html","id":null,"dir":"Reference","previous_headings":"","what":"Get biMAP coordinates — get_bimap","title":"Get biMAP coordinates — get_bimap","text":"Get biMAP coordinates","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_bimap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get biMAP coordinates — get_bimap","text":"","code":"get_bimap(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_bimap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get biMAP coordinates — get_bimap","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_caclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Get caclust object from SingleCellExperiment object. — get_caclust","title":"Get caclust object from SingleCellExperiment object. — get_caclust","text":"Get caclust object SingleCellExperiment object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_caclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get caclust object from SingleCellExperiment object. — get_caclust","text":"","code":"get_caclust(obj, ...)  # S4 method for caclust get_caclust(obj, ...)  # S4 method for SingleCellExperiment get_caclust(obj, ..., caclust_meta_name = \"caclust\")"},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_caclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get caclust object from SingleCellExperiment object. — get_caclust","text":"obj SingleCellExperiment object ... arguments caclust_meta_name Name caclust object stored metadata SingleCellExperiment object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_caclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get caclust object from SingleCellExperiment object. — get_caclust","text":"caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_cell_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Get probablities of cell clusters — get_cell_prob","title":"Get probablities of cell clusters — get_cell_prob","text":"Get probablities cell clusters","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_cell_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get probablities of cell clusters — get_cell_prob","text":"","code":"get_cell_prob(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_cell_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get probablities of cell clusters — get_cell_prob","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_eigen.html","id":null,"dir":"Reference","previous_headings":"","what":"Get eigenvectors from spectral clustering — get_eigen","title":"Get eigenvectors from spectral clustering — get_eigen","text":"Get eigenvectors spectral clustering","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_eigen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get eigenvectors from spectral clustering — get_eigen","text":"","code":"get_eigen(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_eigen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get eigenvectors from spectral clustering — get_eigen","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_gene_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Get probablities of gene clusters — get_gene_prob","title":"Get probablities of gene clusters — get_gene_prob","text":"Get probablities gene clusters","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_gene_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get probablities of gene clusters — get_gene_prob","text":"","code":"get_gene_prob(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_gene_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get probablities of gene clusters — get_gene_prob","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_majority.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines majority in a vector — get_majority","title":"Determines majority in a vector — get_majority","text":"Changed version mclust::majorityVote. Ties broken randomly.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_majority.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines majority in a vector — get_majority","text":"","code":"get_majority(x)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_majority.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines majority in a vector — get_majority","text":"x vector","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_majority.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines majority in a vector — get_majority","text":"single element x highest count.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_ncells.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of cells from each cluster per hexbin — get_ncells","title":"Get the number of cells from each cluster per hexbin — get_ncells","text":"Get number cells cluster per hexbin","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_ncells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of cells from each cluster per hexbin — get_ncells","text":"","code":"get_ncells(umap_cells)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_ncells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of cells from each cluster per hexbin — get_ncells","text":"umap_cells data frame containing umap coordinates cells hex saved hexbin","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_ncells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the number of cells from each cluster per hexbin — get_ncells","text":"bimap_coordinates cells cells makeup hexbin column prop.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameters for generating clustering — get_params","title":"Get parameters for generating clustering — get_params","text":"Get parameters generating clustering","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameters for generating clustering — get_params","text":"","code":"get_params(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameters for generating clustering — get_params","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_snn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SNN graph — get_snn","title":"Get SNN graph — get_snn","text":"Get SNN graph","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_snn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SNN graph — get_snn","text":"","code":"get_snn(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/get_snn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SNN graph — get_snn","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/hex_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"internal helper to plot hex biMAP — hex_plot","title":"internal helper to plot hex biMAP — hex_plot","text":"internal helper plot hex biMAP","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/hex_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"internal helper to plot hex biMAP — hex_plot","text":"","code":"hex_plot(   umap_cells,   umap_genes,   color_by,   colors,   color_genes,   hex_n,   min_bin,   show_density,   cell_alpha,   gene_size,   gene_alpha,   interact_genes,   plotly )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/hex_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"internal helper to plot hex biMAP — hex_plot","text":"umap_cells biMAP coordinates data.frame subsetted cells. umap_genes biMAP coordinates data.frame subsetted genes. color_by Either \"type\" \"cluster\". \"type\" colors type (cell gene) \"cluster\" colors assigned cluster. meta_df provided column data.frame can specified. colors Vector hexadecimal color codes length categories defined color_by longer. NULL ignored. color_genes logical. TRUE colors genes color_by. hex_n integer. Number hexagonal bins partition x-axis. min_bin integer. bins `min_bin` cells plotted. show_density logical. alpha value plot type \"hex\" adjusted number cells bin? cell_alpha numeric. Alpha value cells (0 1). gene_size integer. Size genes plot. gene_alpha numeric. Alpha value genes (0 1). interact_genes character string text labels genes interactive plots. plotly TRUE hex plot labels per hexbin made.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/hex_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"internal helper to plot hex biMAP — hex_plot","text":"ggplot object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/indx_to_spmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert index matrix to sparse matrix. — indx_to_spmat","title":"Convert index matrix to sparse matrix. — indx_to_spmat","text":"Convert index matrix sparse matrix.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/indx_to_spmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert index matrix to sparse matrix. — indx_to_spmat","text":"","code":"indx_to_spmat(indx_mat, row_names, col_names)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/indx_to_spmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert index matrix to sparse matrix. — indx_to_spmat","text":"indx_mat row-wise index matrix. Usually kNN graph. row_names rownames resulting sparse matrix. col_names column names correspond indexes indx_mat.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/indx_to_spmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert index matrix to sparse matrix. — indx_to_spmat","text":"`Matrix::sparseMatrix` object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/is.empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to check if object is empty. — is.empty","title":"Helper function to check if object is empty. — is.empty","text":"Helper function check object empty.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/is.empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to check if object is empty. — is.empty","text":"","code":"is.empty(x)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/is.empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to check if object is empty. — is.empty","text":"x object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/is.empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to check if object is empty. — is.empty","text":"TRUE x length 0 NULL. FALSE otherwise","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/load_gene_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the required gene set. — load_gene_set","title":"Load the required gene set. — load_gene_set","text":"Loads speciefied gene set subsets required organism.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/load_gene_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the required gene set. — load_gene_set","text":"","code":"load_gene_set(set = \"CellMarker\", org)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/load_gene_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the required gene set. — load_gene_set","text":"set Name gene set. Currently supports \"CellMarker\" org Short name organism. \"mm\" mouse, \"hs\" human.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/load_gene_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the required gene set. — load_gene_set","text":"data frame columns \"cell_type\" \"gene\".","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/make_SNN.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SNN-graph from caobj — make_SNN","title":"Create SNN-graph from caobj — make_SNN","text":"Builds shared nearest neighbour graph (SNN) \"cacomp\" object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/make_SNN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SNN-graph from caobj — make_SNN","text":"","code":"make_SNN(   caobj,   k,   SNN_prune = 1/15,   loops = FALSE,   mode = \"out\",   select_genes = TRUE,   prune_overlap = TRUE,   overlap = 0.2,   calc_gene_cell_kNN = FALSE,   marker_genes = NULL,   method = BiocNeighbors::KmknnParam(),   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/make_SNN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SNN-graph from caobj — make_SNN","text":"caobj cacomp object standard principal coordinates calculated. k Either integer (k subgraphs) vector exactly four integers specifying order: k_c cell-cell kNN-graph k_g gene-gene kNN-graph k_cg cell-gene kNN-graph k_gc gene-cell kNN-graph. SNN_prune numeric. Value 0-1. Sets cutoff acceptable jaccard similarity scores neighborhood overlap vertices SNN. Edges values less set 0. default value 1/15. loops TRUE/FALSE. TRUE self-loops allowed, otherwise . mode type neighboring vertices use calculating similarity scores(Jaccard Index). Three options: \"\", \"\" \"\": \"\": Selecting neighbouring vertices -going edges; \"\": Selecting neighbouring vertices -coming edges; \"\": Selecting neigbouring vertices -coming -going edges. select_genes TRUE/FALSE. genes selected whether edge cell-gene kNN graph? prune_overlap TRUE/FALSE. TRUE edges genes share less overlap genes nearest neighbours cell removed. Pruning performed select_genes = TRUE. overlap Numeric 0 1. Overlap cutoff applied prune_overlap = TRUE. calc_gene_cell_kNN TRUE/FALSE. TRUE cell-gene graph calculated choosing k_gc nearest cells gene. FALSE cell-gene graph transposed. marker_genes character. Optional. Names known marker genes excempt pruning graph kept. method BiocNeighbors::BiocNeighborParam object specifying algorithm use. see Details. BPPARAM BiocParallel settings parameter. default single core BiocParallel::SerialParam() parameters can passed.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/make_SNN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SNN-graph from caobj — make_SNN","text":"sparse adjacency Matrix type \"dgCMatrix\". values matrix Jaccard similarity nodes graph. range 0 1, 0 meaning edges shared nodes, wheras 1 means edges shared nodes.","code":""},{"path":[]},{"path":"https://vingronlab.github.io/CAbiNet/reference/make_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a kNN graph — make_knn","title":"Make a kNN graph — make_knn","text":"Given distance matrix, `make_knn()` builds  k-nearest-neighbours graph outputs adjacency matrix.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/make_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a kNN graph — make_knn","text":"","code":"make_knn(dists, k, decr = TRUE, loops = FALSE)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/make_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a kNN graph — make_knn","text":"dists distance matrix k integer. Number nearest neighbours. decr boolean. Whether values `dists` sorted decreasing (TRUE) increasing (FALSE) order. loops TRUE/FALSE. TRUE self-loops allowed, otherwise .","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/make_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a kNN graph — make_knn","text":"adjacency matrix kNN graph: sparse matrix type \"dgCMatrix\".","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/metadata_biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot continous or categorical data as a biMAP — metadata_biMAP","title":"Plot continous or categorical data as a biMAP — metadata_biMAP","text":"Plot continous categorical data biMAP","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/metadata_biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot continous or categorical data as a biMAP — metadata_biMAP","text":"","code":"metadata_biMAP(caclust, meta_df, color_cells_by)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/metadata_biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot continous or categorical data as a biMAP — metadata_biMAP","text":"caclust caclust object bimap coordinates stored. meta_df data.frame column specified color_cells_by cell names rownames (e.g. colData() SingleCellExperiment object) color_cells_by coloumn name meta_df","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/metadata_biMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot continous or categorical data as a biMAP — metadata_biMAP","text":"ggplot metadata biMAP","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle rows of a data frame for better plotting. — mix","title":"Shuffle rows of a data frame for better plotting. — mix","text":"Shuffle rows data frame better plotting.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle rows of a data frame for better plotting. — mix","text":"","code":"mix(df)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/mix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle rows of a data frame for better plotting. — mix","text":"df data.frame","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/mix_rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixes the colors of two clusters proportionally. — mix_rgb","title":"Mixes the colors of two clusters proportionally. — mix_rgb","text":"Mixes colors two clusters proportionally.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/mix_rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixes the colors of two clusters proportionally. — mix_rgb","text":"","code":"mix_rgb(df, colors, cell, color_by)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/mix_rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixes the colors of two clusters proportionally. — mix_rgb","text":"df data.frame cells clusters `color_by` assigned hex bin `hexbin`. colors colors mixed. cell hexbin mix colors . color_by Column name clusters/groups stored `df`.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/mix_rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixes the colors of two clusters proportionally. — mix_rgb","text":"Mixed color hex code.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/new_caclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new caclust object — new_caclust","title":"Create new caclust object — new_caclust","text":"TODO","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/new_caclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new caclust object — new_caclust","text":"","code":"new_caclust(...)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/new_caclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new caclust object — new_caclust","text":"... arguments forwarded new. named slots caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/optimal_km.html","id":null,"dir":"Reference","previous_headings":"","what":"An integration of several runs of kmens with different random seeds — optimal_km","title":"An integration of several runs of kmens with different random seeds — optimal_km","text":"function select optimal clustering result several kmeans runs different random seeds, clustering result smallest within-cluster-sum squared distances selected.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/optimal_km.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An integration of several runs of kmens with different random seeds — optimal_km","text":"","code":"optimal_km(x, k, num_seeds = 10, iter_max = 10, ...)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/optimal_km.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An integration of several runs of kmens with different random seeds — optimal_km","text":"x Matrix. function cluster rows input matrix. k Integer. Number cluters detect kmeans. num_seeds Integer. Number trials random seeds iter_max Integer. Number iterations. ... arguments handed stats::kmeans","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/optimal_km.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An integration of several runs of kmens with different random seeds — optimal_km","text":"Returns object class \"kmeans\" list several components (see ?kmeans) guves local optimal kmeans clustering result within #num_seeds trials.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/optimal_skm.html","id":null,"dir":"Reference","previous_headings":"","what":"An integration of several runs of skmens with different random seeds — optimal_skm","title":"An integration of several runs of skmens with different random seeds — optimal_skm","text":"function select optimal clustering result several skmeans::skmeans runs different random seeds, clustering result smallest within-cluster-sum squared distances selected.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/optimal_skm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An integration of several runs of skmens with different random seeds — optimal_skm","text":"","code":"optimal_skm(   x,   k,   num_seeds = 10,   method = NULL,   m = 1,   weights = 1,   control = list() )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/optimal_skm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An integration of several runs of skmens with different random seeds — optimal_skm","text":"x Matrix. function cluster rows input matrix. k Integer. Number cluters detect skmeans. num_seeds Integer. Number trials random seeds method character string specifying one built-    methods computing spherical \\(k\\)-means partitions,     function taken user-defined method, NULL     (default value).  character string, lower-cased version     matched lower-cased names available built-    methods using pmatch.  See Details     available built-methods defaults. m number less 1 controlling softness     partition (“fuzzification parameter” fuzzy     \\(c\\)-means algorithm).  default value 1 corresponds     hard partitions; values greater one give partitions     increasing softness obtained generalized soft spherical     \\(k\\)-means problem. weights numeric vector non-negative case weights.     Recycled number objects given x necessary. control list control parameters.  See Details.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/optimal_skm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An integration of several runs of skmens with different random seeds — optimal_skm","text":"Returns object inheriting classes skmeans pclust (see ?skmeans) gives local optimal skmeans clustering result within several trials.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/parse_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"turns string of a ratio in a number. — parse_ratio","title":"turns string of a ratio in a number. — parse_ratio","text":"Adapted DOSE::parse_ratio.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/parse_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"turns string of a ratio in a number. — parse_ratio","text":"","code":"parse_ratio(ratio)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/parse_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"turns string of a ratio in a number. — parse_ratio","text":"ratio string form \"1/2\"","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/parse_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"turns string of a ratio in a number. — parse_ratio","text":"numeric value string represented.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/per_cluster_goa.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform gene set overrepresentation analysis\nfor each bicluster and annotate cells based on\nthe best match. — per_cluster_goa","title":"Perform gene set overrepresentation analysis\nfor each bicluster and annotate cells based on\nthe best match. — per_cluster_goa","text":"per_cluster_goa loads required gene set, formats performs gene overrepresentation analysis bicluster cabic object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/per_cluster_goa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform gene set overrepresentation analysis\nfor each bicluster and annotate cells based on\nthe best match. — per_cluster_goa","text":"","code":"per_cluster_goa(   cabic,   universe,   org,   set = \"CellMarker\",   min_size = 10,   max_size = 500,   verbose = TRUE )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/per_cluster_goa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform gene set overrepresentation analysis\nfor each bicluster and annotate cells based on\nthe best match. — per_cluster_goa","text":"cabic biclustering object class \"caclust\" obtained `caclust`. universe genes data set. org Short name organism. \"mm\" mouse, \"hs\" human. set Name gene set. Currently supports \"CellMarker\" min_size Min. number genes gene set. max_size Max number genes gene set. Set Inf want keep genes. verbose Toggles verbosity warnings.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/per_cluster_goa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform gene set overrepresentation analysis\nfor each bicluster and annotate cells based on\nthe best match. — per_cluster_goa","text":"list contain goa results cluster.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/perform_goa.html","id":null,"dir":"Reference","previous_headings":"","what":"Adapted from `DOSE:::enricher_interal`.\nPerforms Gene Overrepresentation Analysis. — perform_goa","title":"Adapted from `DOSE:::enricher_interal`.\nPerforms Gene Overrepresentation Analysis. — perform_goa","text":"perform_goa takes number genes interest (gois) list gene sets performs gene overrepresentation analysis.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/perform_goa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapted from `DOSE:::enricher_interal`.\nPerforms Gene Overrepresentation Analysis. — perform_goa","text":"","code":"perform_goa(gois, gene_sets, universe, min_size, max_size, verbose = TRUE)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/perform_goa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapted from `DOSE:::enricher_interal`.\nPerforms Gene Overrepresentation Analysis. — perform_goa","text":"gois Genes interest. Usually co-clustered genes. gene_sets Named list gene sets genes. universe genes data set. min_size Min. number genes gene set. max_size Max number genes gene set. Set Inf want keep genes. verbose Toggles verbosity warnings.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/perform_goa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adapted from `DOSE:::enricher_interal`.\nPerforms Gene Overrepresentation Analysis. — perform_goa","text":"data frame results go-analysis.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/perform_goa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adapted from `DOSE:::enricher_interal`.\nPerforms Gene Overrepresentation Analysis. — perform_goa","text":"perform_goa performs hypergeometric test gois gene sets. Gene sets trimmed genes present universe  (usually genes available data set) trimmed set  min max size.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_contour_biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot contour biMAP — plot_contour_biMAP","title":"Plot contour biMAP — plot_contour_biMAP","text":"Cell density plotted contour lines genes plotted points contours.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_contour_biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot contour biMAP — plot_contour_biMAP","text":"","code":"plot_contour_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   gene_size = 2,   gene_alpha = 0.8,   contour_n = 5,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ... )  # S4 method for caclust plot_contour_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   gene_size = 2,   gene_alpha = 0.8,   contour_n = 5,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ... )  # S4 method for SingleCellExperiment plot_contour_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   gene_size = 2,   gene_alpha = 0.8,   contour_n = 5,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ...,   caclust_meta_name = \"caclust\",   subset = FALSE )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_contour_biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot contour biMAP — plot_contour_biMAP","text":"obj Object stores biMAP coordinates. Can either \"caclust\" object class \"SingleCellExperiment\". meta_df optional. data.frame either gene cell names () rownames column named `name` column name `color_by`. color_by Either \"type\" \"cluster\". \"type\" colors type (cell gene) \"cluster\" colors assigned cluster. meta_df provided column data.frame can specified. gene_size integer. Size genes plot. gene_alpha numeric. Alpha value genes (0 1). contour_n integer. Number contour lines plot. color_genes logical. TRUE colors genes color_by. label_groups logical. TRUE puts group label median coordinates point. group_label_size integer. Size group label. label_marker_genes logical character vector. TRUE, names detected marker genes displayed. character vector, given marker genes labeled. interactive TRUE plot_scatter_biMAP returns interactive (html) plot. FALSE ggplot object returned. ... arguments. caclust_meta_name Name caclust object stored metadata SingleCellExperiment object. subset Whether biMAP embedding subset cells/genes SCE object. might lead unintended results. unsure, recommend rerun CA caclust instead.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_contour_biMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot contour biMAP — plot_contour_biMAP","text":"contour biMAP plot ggplot object.","code":""},{"path":[]},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_feature_biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"BiMAP visualization of feature expression. — plot_feature_biMAP","title":"BiMAP visualization of feature expression. — plot_feature_biMAP","text":"BiMAP visualization feature expression.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_feature_biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BiMAP visualization of feature expression. — plot_feature_biMAP","text":"","code":"plot_feature_biMAP(   sce,   caclust = NULL,   feature,   color_cells_by = \"expression\",   assay = \"logcounts\",   ... )  # S4 method for SingleCellExperiment,caclust plot_feature_biMAP(   sce,   caclust = NULL,   feature,   color_cells_by = \"expression\",   assay = \"logcounts\",   ... )  # S4 method for SingleCellExperiment,ANY plot_feature_biMAP(   sce,   caclust = NULL,   feature,   color_cells_by = \"expression\",   assay = \"logcounts\",   ...,   caclust_meta_name = \"caclust\" )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_feature_biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BiMAP visualization of feature expression. — plot_feature_biMAP","text":"sce SinleCellExperiment object caclust caclust object bimap slot NULL feature character. Name gene visualize color_cells_by character. Default: expression assay character. Name assay SingleCellExperiment used visualization. ... arguments caclust_meta_name Name caclust object stored metadata SingleCellExperiment object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_feature_biMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BiMAP visualization of feature expression. — plot_feature_biMAP","text":"ggplot object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_goa_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gene overrepresentation analysis results. — plot_goa_res","title":"Plot gene overrepresentation analysis results. — plot_goa_res","text":"Plots gene overrepresentation analysis results cluster.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_goa_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gene overrepresentation analysis results. — plot_goa_res","text":"","code":"plot_goa_res(goa_res, nres = 3)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_goa_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gene overrepresentation analysis results. — plot_goa_res","text":"goa_res List goa results cluster. nres Number top gene sets plot.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_goa_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gene overrepresentation analysis results. — plot_goa_res","text":"ggplot2 object. Dotplot top `nres` gene sets per cluster.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_hex_biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot biMAP with hexagonal bins — plot_hex_biMAP","title":"Plot biMAP with hexagonal bins — plot_hex_biMAP","text":"Bins cells hexagons colors proportionally group label.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_hex_biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot biMAP with hexagonal bins — plot_hex_biMAP","text":"","code":"plot_hex_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   gene_size = 2,   cell_alpha = 0.8,   gene_alpha = 0.8,   hex_n = 40,   min_bin = 2,   show_density = FALSE,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ... )  # S4 method for caclust plot_hex_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   gene_size = 2,   cell_alpha = 0.8,   gene_alpha = 0.8,   hex_n = 40,   min_bin = 2,   show_density = FALSE,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ... )  # S4 method for SingleCellExperiment plot_hex_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   gene_size = 2,   cell_alpha = 0.8,   gene_alpha = 0.8,   hex_n = 40,   min_bin = 2,   show_density = FALSE,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ...,   caclust_meta_name = \"caclust\",   subset = FALSE )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_hex_biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot biMAP with hexagonal bins — plot_hex_biMAP","text":"obj Object stores biMAP coordinates. Can either \"caclust\" object class \"SingleCellExperiment\". meta_df optional. data.frame either gene cell names () rownames column named `name` column name `color_by`. color_by Either \"type\" \"cluster\". \"type\" colors type (cell gene) \"cluster\" colors assigned cluster. meta_df provided column data.frame can specified. gene_size integer. Size genes plot. cell_alpha numeric. Alpha value cells (0 1). gene_alpha numeric. Alpha value genes (0 1). hex_n integer. Number hexagonal bins partition x-axis. min_bin integer. bins `min_bin` cells plotted. show_density logical. alpha value plot type \"hex\" adjusted number cells bin? color_genes logical. TRUE colors genes color_by. label_groups logical. TRUE puts group label median coordinates point. group_label_size integer. Size group label. label_marker_genes logical character vector. TRUE, names detected marker genes displayed. character vector, given marker genes labeled. interactive TRUE plot_scatter_biMAP returns interactive (html) plot. FALSE ggplot object returned. ... arguments caclust_meta_name Name caclust object stored metadata SingleCellExperiment object. subset Whether biMAP embedding subset cells/genes SCE object. might lead unintended results. unsure, recommend rerun CA caclust instead.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_hex_biMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot biMAP with hexagonal bins — plot_hex_biMAP","text":"hex-plot biMAP ggplot.","code":""},{"path":[]},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_metadata_biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot continous or categorical data as a biMAP — plot_metadata_biMAP","title":"Plot continous or categorical data as a biMAP — plot_metadata_biMAP","text":"Plot continous categorical data biMAP","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_metadata_biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot continous or categorical data as a biMAP — plot_metadata_biMAP","text":"","code":"plot_metadata_biMAP(obj, color_cells_by, ...)  # S4 method for caclust plot_metadata_biMAP(obj, color_cells_by, ..., meta_df)  # S4 method for SingleCellExperiment plot_metadata_biMAP(obj, color_cells_by, ..., caclust_meta_name = \"caclust\")"},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_metadata_biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot continous or categorical data as a biMAP — plot_metadata_biMAP","text":"obj caclust SingleCellExperiment object. color_cells_by coloumn name meta_df ... arguments. meta_df data.frame column specified color_cells_by cell names rownames (e.g. colData() SingleCellExperiment object) caclust_meta_name Name caclust object stored metadata SingleCellExperiment object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_metadata_biMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot continous or categorical data as a biMAP — plot_metadata_biMAP","text":"ggplot metadata biMAP","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_scatter_biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots a biMAP scatter plot — plot_scatter_biMAP","title":"Plots a biMAP scatter plot — plot_scatter_biMAP","text":"Plots cells genes points. Genes plotted top cells larger size make visual differentiation easier.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_scatter_biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots a biMAP scatter plot — plot_scatter_biMAP","text":"","code":"plot_scatter_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   cell_size = 1,   gene_size = 2,   cell_alpha = 0.7,   gene_alpha = 0.8,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ... )  # S4 method for caclust plot_scatter_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   cell_size = 1,   gene_size = 2,   cell_alpha = 0.7,   gene_alpha = 0.8,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ... )  # S4 method for SingleCellExperiment plot_scatter_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   cell_size = 1,   gene_size = 2,   cell_alpha = 0.7,   gene_alpha = 0.8,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ...,   caclust_meta_name = \"caclust\",   subset = FALSE )  plot_biMAP(   obj,   meta_df = NULL,   color_by = \"cluster\",   cell_size = 1,   gene_size = 2,   cell_alpha = 0.7,   gene_alpha = 0.8,   color_genes = TRUE,   label_groups = TRUE,   group_label_size = 4,   label_marker_genes = FALSE,   interactive = FALSE,   ... )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_scatter_biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots a biMAP scatter plot — plot_scatter_biMAP","text":"obj Object stores biMAP coordinates. Can either \"caclust\" object class \"SingleCellExperiment\". meta_df optional. data.frame either gene cell names () rownames column named `name` column name `color_by`. color_by Either \"type\" \"cluster\". \"type\" colors type (cell gene) \"cluster\" colors assigned cluster. meta_df provided column data.frame can specified. cell_size integer. Size cells plot. gene_size integer. Size genes plot. cell_alpha numeric. Alpha value cells (0 1). gene_alpha numeric. Alpha value genes (0 1). color_genes logical. TRUE colors genes color_by. label_groups logical. TRUE puts group label median coordinates point. group_label_size integer. Size group label. label_marker_genes logical character vector. TRUE, names detected marker genes displayed. character vector, given marker genes labeled. interactive TRUE plot_scatter_biMAP returns interactive (html) plot. FALSE ggplot object returned. ... arguments. caclust_meta_name Name caclust object stored metadata SingleCellExperiment object. subset Whether biMAP embedding subset cells/genes SCE object. might lead unintended results. unsure, recommend rerun CA caclust instead.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/plot_scatter_biMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots a biMAP scatter plot — plot_scatter_biMAP","text":"biMAP scatter plot ggplot object.","code":""},{"path":[]},{"path":"https://vingronlab.github.io/CAbiNet/reference/rm_monoclusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove clusters only consisting of cells/genes — rm_monoclusters","title":"Remove clusters only consisting of cells/genes — rm_monoclusters","text":"Takes object class biclust removes clusters consist cells genes.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/rm_monoclusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove clusters only consisting of cells/genes — rm_monoclusters","text":"","code":"rm_monoclusters(obj, ...)  # S4 method for caclust rm_monoclusters(obj)  # S4 method for Biclust rm_monoclusters(obj)  # S4 method for SingleCellExperiment rm_monoclusters(obj, subset_sce = FALSE)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/rm_monoclusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove clusters only consisting of cells/genes — rm_monoclusters","text":"obj biclustering results caclust biclust SingleCellExperiment object. ... arguments subset_sce logical. Subset SCE object cells co-clusters genes TRUE.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/rm_monoclusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove clusters only consisting of cells/genes — rm_monoclusters","text":"caclust/biclust object monoclusters removed.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_biMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Run UMAP embedding for cell-gene graph built up by caclust. — run_biMAP","title":"Run UMAP embedding for cell-gene graph built up by caclust. — run_biMAP","text":"function takes cacomp caclust object input calculate UMAP embedding cell-gene graph several different ways: 'SNNdist'(Default): run UMAP distance matrix cell-gene SNN graph built caclust, '1-adj(SNN)'. 'spectral': run UMAP selected eigenvectors cell-gene graph laplacian (eligiable algorithm set 'spectral' 'caclust' function) 'ca': run UMAP singular vectors Correspondence Analysis.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_biMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run UMAP embedding for cell-gene graph built up by caclust. — run_biMAP","text":"","code":"run_biMAP(   obj,   caobj = NULL,   k = 30,   rand_seed = 2358,   method = \"SNNdist\",   use_SNN = TRUE,   features = NULL )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_biMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run UMAP embedding for cell-gene graph built up by caclust. — run_biMAP","text":"obj results biclustering class \"caclust\" caobj cacomp object principal standard coordinates calculated. needs supplied using method \"ca\". k integer. Number nearest neighbours use compute UMAP. rand_seed integer. Random seed UMAP. method Can either \"SNNdist\", \"spectral\" \"ca\". using \"ca\", \"cacomp\" object provided caobj. use_SNN TRUE/FALSE. parameter works method == 'ca'. TRUE, calculate bimap embedding genes cells contained SNN graph together given 'fearures' . FALSE, calculate bimap embedding cells contained SNN graph together given 'fearures' . features character/vector gene names. parameter works method == 'ca'. 'ca' method allows visualization genes absent SNN graph, 'features' genes detected biclustering algorithm, genes goes CA analysis. Setting use_SNN = FALSE allows users visualization feature genes user defined/interested.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_biMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run UMAP embedding for cell-gene graph built up by caclust. — run_biMAP","text":"caclust object biMAP coordinates stored bimap slot.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_caclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Run biclustering — run_caclust","title":"Run biclustering — run_caclust","text":"Convenient wrapper around make_SNN run_leiden/run_spectral. run_caclust takes cacomp object biclusters cells genes.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_caclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run biclustering — run_caclust","text":"","code":"run_caclust(   caobj,   k,   algorithm = \"leiden\",   SNN_prune = 1/15,   loops = FALSE,   mode = \"out\",   select_genes = TRUE,   prune_overlap = TRUE,   overlap = 0.2,   calc_gene_cell_kNN = FALSE,   resolution = 1,   marker_genes = NULL,   n.int = 10,   rand_seed = 2358,   use_gap = TRUE,   nclust = NULL,   spectral_method = \"kmeans\",   iter_max = 10,   num_seeds = 10,   return_eig = TRUE,   dims = NULL,   cast_to_dense = TRUE,   method = BiocNeighbors::KmknnParam(),   BPPARAM = BiocParallel::SerialParam(),   leiden_pack = \"leiden\" )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_caclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run biclustering — run_caclust","text":"caobj cacomp object principal standard coordinates calculated. k Either integer (k subgraphs) vector exactly four integers specifying order: k_c cell-cell kNN-graph, k_g gene-gene kNN-graph, k_cg cell-gene kNN-graph, k_gc gene-cell kNN-graph. algorithm Character. Algorithm clustering. Options \"leiden\" \"spectral\". Defalut: 'leiden'. SNN_prune numeric. Value 0-1. Sets cutoff acceptable jaccard similarity scores neighborhood overlap vertices SNN. Edges values less set 0. default value 1/15. loops TRUE/FALSE. TRUE self-loops allowed, otherwise . mode type neighboring vertices use calculating similarity scores(Jaccard Index). Three options: \"\", \"\" \"\": \"\": Selecting neighbouring vertices -going edges; \"\": Selecting neighbouring vertices -coming edges; \"\": Selecting neigbouring vertices -coming -going edges. select_genes TRUE/FALSE. genes selected whether edge cell-gene kNN graph? prune_overlap TRUE/FALSE. TRUE edges genes share less overlap genes nearest neighbours cell removed. Pruning performed select_genes = TRUE. overlap Numeric 0 1. Overlap cutoff applied prune_overlap = TRUE. calc_gene_cell_kNN TRUE/FALSE. TRUE cell-gene graph calculated choosing k_gc nearest cells gene. FALSE cell-gene graph transposed. resolution float number. Resolution leiden algorithm. marker_genes character. Optional. Names known marker genes excempt pruning graph kept. n.int Integer. Number iterations leiden algorithm. rand_seed integer. Random seed. use_gap Logical, TRUE/FALSE. TRUE, 'eigengap' method used find important eigenvector automatically, number output clusters equals number selected eigenvectors. FALSE, 'nclust'(integer) specified. eigenvectors corresponding smallest 'nclust' eigenvalues selcted 'nclust' clusters detected skmeans/kmeans/GMM. nclust Integer. Number clusters. spectral_method character. Name method cluster eigenvectors. Can following 3: \"kmeans\": k-means clustering \"skmeans\": spherical k-means clustering \"GMM\": Gaussian-Mixture-Model fuzzy clustering. iter_max Number iterations k-means clustering GMM. num_seeds Number times k-means clustering repeated. return_eig Logical. Whether return eigenvectors store caclust-object. dims Integer. Number dimensions choose SVD graph laplacian. cast_to_dense logical. Casting sparse SNN adjacency matrix dense speeds leiden algorithm. method BiocNeighbors::BiocNeighborParam object specifying algorithm use. see Details. BPPARAM BiocParallel settings parameter. default single core BiocParallel::SerialParam() parameters can passed. leiden_pack character. Optional values 'igraph'(default) 'leiden', package used leiden clustering.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_caclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run biclustering — run_caclust","text":"Returns caclust objec clustering results stored. cell gene clusters can accessed via cell_clusters(obj)/gene_clusters(obj).","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_leiden.html","id":null,"dir":"Reference","previous_headings":"","what":"Leiden clustering on bigraph — run_leiden","title":"Leiden clustering on bigraph — run_leiden","text":"function takes caclust object precomputed SNN-graph clusters cells genes simultaneously.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_leiden.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leiden clustering on bigraph — run_leiden","text":"","code":"run_leiden(   caclust,   resolution = 1,   n.int = 10,   rand_seed = 2358,   cast_to_dense = TRUE,   leiden_pack = \"igraph\" )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_leiden.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leiden clustering on bigraph — run_leiden","text":"caclust caclust object SNN calculated. resolution float number. Resolution leiden algorithm. n.int Integer. Number iterations leiden algorithm. rand_seed integer. Random seed. cast_to_dense logical. Casting sparse SNN adjacency matrix dense speeds leiden algorithm. leiden_pack character. Optional values 'igraph'(default) 'leiden', package used leiden clustering.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_leiden.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leiden clustering on bigraph — run_leiden","text":"Object type \"caclust\" cell gene clusters saved.","code":""},{"path":[]},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Run spectral clustering — run_spectral","title":"Run spectral clustering — run_spectral","text":"Spectral clustering algorithm normalized graph laplacian.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run spectral clustering — run_spectral","text":"","code":"run_spectral(   caclust,   dims = 30,   use_gap = TRUE,   nclust = NULL,   spectral_method = \"kmeans\",   iter_max = 10,   num_seeds = 10,   return_eig = TRUE )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run spectral clustering — run_spectral","text":"caclust Caclust-class object. dims Integer. Number dimensions choose SVD graph laplacian. use_gap Logical, TRUE/FALSE. TRUE, 'eigengap' method used find important eigenvector automatically, number output clusters equals number selected eigenvectors. FALSE, 'nclust'(integer) specified. eigenvectors corresponding smallest 'nclust' eigenvalues selcted 'nclust' clusters detected skmeans/kmeans/GMM. nclust Integer. Number clusters. spectral_method character. Name method cluster eigenvectors. Can following 3: \"kmeans\": k-means clustering \"skmeans\": spherical k-means clustering \"GMM\": Gaussian-Mixture-Model fuzzy clustering. iter_max Number iterations k-means clustering GMM. num_seeds Number times k-means clustering repeated. return_eig Logical. Whether return eigenvectors store caclust-object.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/run_spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run spectral clustering — run_spectral","text":"clustering results type 'caclust'.","code":""},{"path":[]},{"path":"https://vingronlab.github.io/CAbiNet/reference/scatter_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"internal helper to plot scatter biMAP — scatter_plot","title":"internal helper to plot scatter biMAP — scatter_plot","text":"internal helper plot scatter biMAP","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/scatter_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"internal helper to plot scatter biMAP — scatter_plot","text":"","code":"scatter_plot(   umap_cells,   umap_genes,   color_by,   colors,   color_genes,   cell_size,   cell_alpha,   gene_size,   gene_alpha,   interact_genes,   interact_cells )"},{"path":"https://vingronlab.github.io/CAbiNet/reference/scatter_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"internal helper to plot scatter biMAP — scatter_plot","text":"umap_cells biMAP coordinates data.frame subsetted cells. umap_genes biMAP coordinates data.frame subsetted genes. color_by Either \"type\" \"cluster\". \"type\" colors type (cell gene) \"cluster\" colors assigned cluster. meta_df provided column data.frame can specified. colors named vector length equal group size. color_genes logical. TRUE colors genes color_by. cell_size integer. Size cells plot. cell_alpha numeric. Alpha value cells (0 1). gene_size integer. Size genes plot. gene_alpha numeric. Alpha value genes (0 1). interact_genes character string text labels genes interactive plots. interact_cells character string text labels cells interactive plot.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/scatter_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"internal helper to plot scatter biMAP — scatter_plot","text":"ggplot object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/show.caclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Print caclust object in console — show.caclust","title":"Print caclust object in console — show.caclust","text":"Print caclust object console","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/show.caclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print caclust object in console — show.caclust","text":"","code":"show.caclust(object)  # S4 method for caclust show(object)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/show.caclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print caclust object in console — show.caclust","text":"object caclust object","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/tbl_paste.html","id":null,"dir":"Reference","previous_headings":"","what":"concatenate table() results for hex_plot. — tbl_paste","title":"concatenate table() results for hex_plot. — tbl_paste","text":"concatenate table() results hex_plot.","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/tbl_paste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"concatenate table() results for hex_plot. — tbl_paste","text":"","code":"tbl_paste(x)"},{"path":"https://vingronlab.github.io/CAbiNet/reference/tbl_paste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"concatenate table() results for hex_plot. — tbl_paste","text":"x vector","code":""},{"path":"https://vingronlab.github.io/CAbiNet/reference/tbl_paste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"concatenate table() results for hex_plot. — tbl_paste","text":"concatenated results table.","code":""}]
